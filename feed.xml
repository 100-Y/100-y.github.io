<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://36525.day/feed.xml" rel="self" type="application/atom+xml"/><link href="https://36525.day/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-27T04:23:12-07:00</updated><id>https://36525.day/feed.xml</id><title type="html">blank</title><subtitle>以「36525 天」为象征，这是某人用一生在写的一本书。Symbolizing 36,525 days — a book someone writes across a lifetime. </subtitle><entry><title type="html">上海密局 / The Shanghai Gambit</title><link href="https://36525.day/blog/2025-06-24/the-shanghai-gambit/" rel="alternate" type="text/html" title="上海密局 / The Shanghai Gambit"/><published>2025-06-24T00:00:00-07:00</published><updated>2025-06-24T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-24/the-shanghai-gambit</id><content type="html" xml:base="https://36525.day/blog/2025-06-24/the-shanghai-gambit/"><![CDATA[<p><img src="/assets/img/blog/shanghai-gambit.svg" style="width:100%;" alt="shanghai-gambit"/></p> <hr/> <h2 id="上海密局">上海密局</h2> <hr/> <h3 id="第一章租界幽灵">第一章：租界幽灵</h3> <hr/> <p>电报在凌晨3点47分送达，<u>加密的消息如同硫酸般灼烧着上海潮湿的夜空</u>。<strong><mark>海外资本到位。凤凰行动开始。时间窗口：72小时。</mark></strong>陈志明将电报纸捏成一团，指节在昏暗的煤气灯下显得苍白。窗外，黄浦江如墨般翻滚，<u>载着秘密和尸体一同东流</u>。1925年是血腥与机遇并存的年代——而陈志明刚刚同时握住了两者。计划大胆到近乎疯狂：以欧洲神秘金融家的支持渗透四分五裂的军阀中国，智胜崛起的国民党和潜伏的共产党细胞，开辟第三条通往权力的道路。不是通过枪杆子，而是通过更危险的东西——希望。他的联络人说得很明确：”<strong><mark>你拥有孙中山和那些布尔什维克同情者做梦都想不到的资源。好好利用。中国正在像被锤子击中的玻璃一样破碎。做那只接住碎片的手。</mark></strong>“但当陈志明踏入上海公共租界的迷宫时，他总感觉自己被人监视着。附近茶馆里麻将牌的声音停得太突然。人力车夫的眼神停留得太久。在中国政治的游戏中，人人都是棋手——人人都是可以牺牲的棋子。</p> <hr/> <h3 id="第二章军阀博弈">第二章：军阀博弈</h3> <hr/> <p>刘正山将军的要塞大院弥漫着鸦片和偏执的气味。陈志明数了数，从大门到将军会客厅之间有十七个武装卫兵——每一个都准备在第一次背叛迹象出现时把院子染红。”你说什么经济诱导，”刘正山咆哮道，伤疤累累的脸扭曲着怀疑，”但我看到的是洋鬼子的傀儡在为西方的黄金起舞。”陈志明的脉搏猛跳，但声音依然平稳：”将军，当您的对手为了省份互相撕杀时，我为您提供的是帝国。农业现代化、铁路扩张、工业发展——全部由国际合作伙伴资助。加入我，您的士兵就能吃米饭而不是子弹。”沉默如刀刃般划过陈志明的咽喉。然后刘正山的笑声爆发——粗糙、冷酷、危险。”那些在我身后紧追不舍的国民党走狗怎么办？那些藏在阴影中的共产党老鼠怎么办？”“他们用昨天的武器打昨天的战争，”陈志明回答，”我们将用明天的工具赢得明天的和平。”但话音刚落，陈志明就发现了阴影中的身影——一个穿着传统服装的女人，眼神锐利如刀。她在他看清之前就消失了，但信息很明确：<strong><mark>敌人已经知道他在这里。</mark></strong>.</p> <hr/> <h3 id="第三章血与蓝图">第三章：血与蓝图</h3> <hr/> <p>暗杀在黎明时分开始。陈志明的保镖挨了第一颗子弹，鲜血在白衬衫上绽放，他倒在酒店房间的地板上。陈志明滚到翻倒的桌子后面，毛瑟手枪在他汗湿的握持中打滑。”志明！”声音属于他的共产党联络人李伟——但李伟应该在广州，不应该在上海，更不应该带领一个处决小队。”你的第三条道路到此为止！”子弹撕咬着红木桌子。陈志明的思维如心跳般急速转动。共产党发现了他的乡村教育计划——那个本可以让数百万人摆脱愚昧、创造出既不忠于军阀也不忠于革命者的受教育中产阶级的学校网络。他们看出了它的本质：对他们农民起义愿景的威胁。但陈志明不是靠公平战斗在上海黑社会生存三年的。趁李伟的手下重新装弹时，他引爆了藏在公文包里的烟雾弹，在玻璃和火药的阵雨中冲出窗户。消防梯在他的重量下颤抖，他下降到法租界的混乱中。身后，李伟的咒骂如雷鸣般回荡。但陈志明已经在计划下一步——因为在1925年的中国，静止不动意味着死亡，而死亡意味着让四亿人民淹没在血海中。</p> <hr/> <h3 id="第四章理想的代价">第四章：理想的代价</h3> <hr/> <p>三周后，陈志明站在天津一个燃烧的仓库里，看着他的梦想化为灰烬。国民党的行动比任何人预期的都要快。他的温和联盟——教师、商人、进步官员——像台风中的树叶一样四散。有些人死了。有些人逃了。其余的人转换了阵营，以麻雀般的生存本能读懂了风向。”你太天真了，”他的英国情报联络人伊莎贝拉·莫里森说，她的声音在噼啪作响的火焰声中几乎听不见。”你以为可以用账本和外交握手重塑中国。但这个国家只理解权力——原始的、血腥的、不妥协的权力。”陈志明咬紧牙关：”那你理解什么？你把中国看作一个可以剥削的市场，一个需要解决的谜题。但我看到的是四亿灵魂在呼喊着比无尽战争更好的东西。”“灵魂挡不住子弹，志明。”真相如同物理打击般击中了他。他的渐进改革愿景，经济发展提升民众，外交平衡避免外国统治——这一切都是美好的、合理的、人道的。但在一个强权即正义、妥协看起来像软弱的世界里，完全不可能实现。当远处警笛呼啸时，陈志明做出了选择。温和的道路已经封闭。但也许——也许还有另一条路。更黑暗。更危险。但赌注如此之高，仁慈是中国承受不起的奢侈品。</p> <hr/> <h3 id="尾声长线博弈">尾声：长线博弈</h3> <hr/> <p>摘自陈志明日记，1925年12月31日：历史不会记住我们几乎走过的第三条道路。它只会记录后来发生的事——战争、革命、为了建立在尸山血海上的天堂愿景而死去的数百万人。但在这几个月的失败中，我学到了一些东西：中国的救赎不会来自外国的黄金或外国的思想。它将来自对真正权力的理解——不是控制人民，而是成为他们梦想中不可或缺的一部分。游戏远未结束。下一次，我不会按照任何其他人的规则行事。未来属于那些有耐心为之付出代价的人。</p> <hr/> <h3 id="全文完">全文完</h3> <hr/> <p>作者注：这部惊悚小说的重新创作将原始的战略分析转化为扣人心弦的政治阴谋叙事，展示了即使是最理性的计划也可能与历史的混乱发生激烈碰撞。主人公从理想主义改革者到冷酷现实主义者的转变，反映了中国动荡的1920年代的更广泛悲剧。</p> <hr/> <h2 id="the-shanghai-gambit">The Shanghai Gambit</h2> <hr/> <h3 id="chapter-1-the-ghost-of-the-concessions">Chapter 1: The Ghost of the Concessions</h3> <hr/> <p>The telegram arrived at 3:47 AM, its encrypted message <u>burning through the humid Shanghai night like acid through silk</u>. <strong><mark>FOREIGN CAPITAL SECURED. OPERATION PHOENIX GREENLIGHT. TIME WINDOW: 72 HOURS.</mark></strong> Marcus Chen crushed the paper in his fist, his knuckles white against the dim gaslight. Outside his window, the Huangpu River churned black as ink, <u>carrying secrets and corpses in equal measure</u>. 1925 was a year of blood and opportunity—and Chen had just been handed both. The plan was audacious to the point of madness: infiltrate the fractured landscape of warlord China with backing from shadowy European financiers, outmaneuver both the rising Kuomintang and the whispered Communist cells, and forge a third path to power. Not through the barrel of a gun, but through something far more dangerous—hope. Chen’s handler had been explicit: “<strong><mark>You have resources neither Sun Yat-sen nor those Bolshevik sympathizers could dream of. Use them. China is fragmenting like glass under a hammer. Be the hand that catches the pieces.</mark></strong>” But as Chen stepped into the maze of Shanghai’s International Settlement, he couldn’t shake the feeling that he was being watched. The clicking of mahjong tiles from a nearby teahouse stopped too abruptly. A rickshaw driver’s eyes lingered too long. In the game of Chinese politics, everyone was a player—and everyone was expendable.</p> <hr/> <h3 id="chapter-2-the-warlords-gambit">Chapter 2: The Warlord’s Gambit</h3> <hr/> <p>General Liu Zhengshan’s fortress compound reeked of opium and paranoia. Chen counted seventeen armed guards between the gate and the general’s receiving hall—each one ready to paint the courtyard red at the first sign of betrayal. “You speak of economic inducement,” Liu growled, his scarred face twisted in suspicion. “But I see a foreign devil’s puppet dancing to Western gold.” Chen’s pulse hammered, but his voice remained steady. “General, while your rivals tear each other apart over provinces, I offer you an empire. Agricultural modernization, railway expansion, industrial development—all financed through international partnerships. Join me, and your soldiers eat rice instead of bullets.” The silence stretched like a blade across Chen’s throat. Then Liu’s laugh erupted—harsh, cynical, dangerous. “And what of the Kuomintang dogs snapping at my heels? What of those Communist rats in the shadows?” “They fight yesterday’s war with yesterday’s weapons,” Chen replied. “We’ll win tomorrow’s peace with tomorrow’s tools.” But even as the words left his mouth, Chen spotted the figure in the shadows—a woman in traditional dress, her eyes sharp as razors. She melted away before he could get a clear look, but the message was clear: <strong><mark>the enemy already knew he was here.</mark></strong></p> <hr/> <h3 id="chapter-3-blood-and-blueprints">Chapter 3: Blood and Blueprints</h3> <hr/> <p>The assassination attempt came at dawn. Chen’s bodyguard took the first bullet, crimson blooming across his white shirt as he crumpled to the hotel room floor. Chen rolled behind an overturned table, his Mauser pistol slick with sweat in his grip. “Chen!” The voice belonged to his Communist contact, Li Wei—but Li was supposed to be in Canton, not Shanghai, and definitely not leading an execution squad. “Your third path ends here!” Bullets chewed through the mahogany table. Chen’s mind raced as fast as his heart. The Communists had discovered his rural education initiative—the network of schools that would have lifted millions out of ignorance, creating a educated middle class loyal to neither warlord nor revolutionary. They saw it for what it was: a threat to their vision of peasant uprising. But Chen hadn’t survived three years in the Shanghai underworld by fighting fair. As Li’s men reloaded, he triggered the smoke grenade hidden in his briefcase and crashed through the window in a shower of glass and gunpowder. The fire escape rattled under his weight as he descended into the chaos of the French Concession. Behind him, Li’s curses echoed like thunder. But Chen was already planning his next move—because in 1925 China, standing still meant dying, and dying meant letting 400 million people drown in blood.</p> <hr/> <h3 id="chapter-4-the-price-of-vision">Chapter 4: The Price of Vision</h3> <hr/> <p>Three weeks later, Chen stood in a burning warehouse in Tianjin, watching his dreams turn to ash. The Kuomintang had moved faster than anyone anticipated. His moderate coalition—teachers, merchants, progressive officials—lay scattered like leaves in a typhoon. Some were dead. Others had fled. The rest had switched sides, reading the wind with the survival instinct of sparrows. “You were naive,” said Isabella Morrison, his British intelligence contact, her voice barely audible over the crackling flames. “You thought you could reshape China with ledger books and diplomatic handshakes. But this country only understands power—raw, bloody, uncompromising power.” Chen’s jaw tightened. “And what do you understand? You see China as a market to exploit, a puzzle to solve. But I see 400 million souls crying out for something better than endless war.” “Souls don’t stop bullets, Marcus.” The truth hit him like a physical blow. His vision of gradual reform, of economic development lifting the masses, of diplomatic balance avoiding foreign domination—it had been beautiful, logical, humane. And completely impossible in a world where might made right and compromise looked like weakness. As sirens wailed in the distance, Chen made his choice. The moderate path was closed. But perhaps—perhaps there was still another way. Darker. More dangerous. But with stakes this high, mercy was a luxury China couldn’t afford.</p> <hr/> <h3 id="epilogue-the-long-game">Epilogue: The Long Game</h3> <hr/> <p>From the diary of Marcus Chen, December 31, 1925: History will not remember the third path we almost walked. It will record only what came after—the wars, the revolutions, the millions who died for visions of paradise built on mountains of bones. But I have learned something in these months of failure: China’s salvation will not come from foreign gold or foreign ideas. It will come from understanding that true power lies not in controlling people, but in becoming indispensable to their dreams. The game is far from over. And next time, I will not play by anyone else’s rules. The future belongs to those patient enough to pay its price.</p> <hr/> <h3 id="the-end">THE END</h3> <hr/> <p>Author’s Note: This thriller reimagining transforms the original strategic analysis into a pulse-pounding narrative of political intrigue, showing how even the most rational plans can collide violently with the chaos of history. The protagonist’s journey from idealistic reformer to hardened realist mirrors the broader tragedy of China’s turbulent 1920s.</p>]]></content><author><name></name></author><category term="Essays"/><summary type="html"><![CDATA[一场关于信念与现实冲突的惊悚小说。A political thriller about belief colliding with reality.]]></summary></entry><entry><title type="html">1925年的中国战略 / China Strategy in 1925</title><link href="https://36525.day/blog/2025-06-23/china-strategy-in-1925/" rel="alternate" type="text/html" title="1925年的中国战略 / China Strategy in 1925"/><published>2025-06-23T00:00:00-07:00</published><updated>2025-06-23T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-23/china-strategy-in-1925</id><content type="html" xml:base="https://36525.day/blog/2025-06-23/china-strategy-in-1925/"><![CDATA[<p><img src="/assets/img/blog/china-strategy-in-1925.svg" style="width:100%;" alt="china-strategy-in-1925"/></p> <hr/> <h2 id="1925年的中国战略">1925年的中国战略</h2> <hr/> <p>假使你身处 <strong><mark>1925年的中国</mark></strong>，<u>拥有更强大的境外支持——包括资金、技术与国际影响力</u>——那么确实有可能比<strong><mark>国民党与共产党</mark></strong>做得更好，但关键在于你是否能以超越时代局限的视野与执行力推进统一、发展与社会整合。</p> <p>相比军阀混战或激烈内战导致的高昂代价，你可以通过经济诱导和社会协商实现高效统一；通过乡村教育和技术转移快速扫盲与工业化；以渐进式土地改革与市场激励缩小城乡差距；在社会治理上包容各阶层与文化传统，减少撕裂与动荡；在外交上灵活平衡列强，争取最大自主空间；并提前建立现代军队与危机管理体系，提高国家韧性。</p> <p>你若坚持：<strong><mark>以人为本、内外平衡、速度与稳健并重</mark></strong>，并借<u>助现代治理手段防腐防乱</u>，就可能打造一个既避免历史悲剧、又走出独立自主发展道路的现代中国，比任何后来者都更快更稳更少代价地实现国家崛起。</p> <hr/> <h2 id="china-strategy-in-1925">China Strategy in 1925</h2> <hr/> <p>If you were in <strong><mark>China in 1925</mark></strong>, <u>with stronger external support—including funding, technology, and international influence</u>—it would indeed be possible to perform better than <strong><mark>the Kuomintang (KMT) or the Communist Party</mark></strong>. The key lies in whether you can advance unification, development, and social integration with a vision and execution that transcend the limitations of the time.</p> <p>Compared to the high costs of warlord conflict or civil war, you could achieve unification more efficiently through economic inducement and social negotiation; promote rapid literacy and industrialization through rural education and technology transfer; narrow the urban–rural gap through gradual land reform combined with market incentives; reduce division and unrest through inclusive governance that embraces all social classes and cultural traditions; adopt a flexible diplomatic strategy to balance foreign powers and strive for maximum autonomy; and establish modern armed forces and crisis management systems early to enhance national resilience.</p> <p>If you uphold principles such as: <strong><mark>people-centeredness, balance between internal and external forces, and combining speed with stability</mark></strong>, and <u>apply modern governance tools to combat corruption and disorder</u>, you could build a modern China that avoids historical tragedies and achieves national rise faster, more steadily, and at a lower cost than any of its historical successors.</p>]]></content><author><name></name></author><category term="Notes"/><category term="strategy"/><category term="china"/><summary type="html"><![CDATA[拥有更强境外支持的你，能否在1925年中国重构统一与现代化？从教育、外交、治理到经济，设想一套超越历史局限的战略。With stronger external support, could you reshape unification and modernization in China in 1925? From education and diplomacy to governance and the economy, this is a strategy that seeks to transcend the historical constraints of the time.]]></summary></entry><entry><title type="html">HTML 标签 + Markdown 语法：在 VS Code 中结合使用的实战指南</title><link href="https://36525.day/blog/2025-06-22/html-tags-and-markdown-syntax/" rel="alternate" type="text/html" title="HTML 标签 + Markdown 语法：在 VS Code 中结合使用的实战指南"/><published>2025-06-22T00:00:00-07:00</published><updated>2025-06-22T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-22/html-tags-and-markdown-syntax</id><content type="html" xml:base="https://36525.day/blog/2025-06-22/html-tags-and-markdown-syntax/"><![CDATA[<p><img src="/assets/img/blog/html-tags-and-markdown-syntax.svg" style="width:100%;" alt="html-tags-and-markdown-syntax"/></p> <hr/> <p>Markdown 是写作界的轻量标记语言明星，语法简洁、格式清晰。但它在某些格式表达（<u>如下划线、高亮</u>）方面存在局限。幸运的是，<strong><mark>Markdown 完全支持内嵌 HTML 标签</mark></strong>，这使我们能结合 <code class="language-plaintext highlighter-rouge">&lt;mark&gt;</code>、<code class="language-plaintext highlighter-rouge">&lt;u&gt;</code> 等标签弥补 Markdown 的不足。本文将结合 <u>VS Code 编辑器、Emmet 快捷键</u>、自动补全语法，教你高效写作出格式丰富、结构清晰的 Markdown 文档。</p> <hr/> <h2 id="一html-标签-vs-markdown-语法对照表">一、HTML 标签 vs Markdown 语法对照表</h2> <hr/> <table> <thead> <tr> <th>样式</th> <th>HTML</th> <th>Markdown</th> <th>效果</th> </tr> </thead> <tbody> <tr> <td>斜体</td> <td><code class="language-plaintext highlighter-rouge">&lt;em&gt;text&lt;/em&gt;</code></td> <td><code class="language-plaintext highlighter-rouge">*text*</code></td> <td><em>text</em></td> </tr> <tr> <td>删除线</td> <td><code class="language-plaintext highlighter-rouge">&lt;del&gt;text&lt;/del&gt;</code></td> <td><code class="language-plaintext highlighter-rouge">~~text~~</code></td> <td><del>text</del></td> </tr> <tr> <td>高亮</td> <td><code class="language-plaintext highlighter-rouge">&lt;mark&gt;text&lt;/mark&gt;</code></td> <td>X（不支持）</td> <td><mark>text</mark></td> </tr> <tr> <td>下划线</td> <td><code class="language-plaintext highlighter-rouge">&lt;u&gt;text&lt;/u&gt;</code></td> <td>X（不支持）</td> <td><u>text</u></td> </tr> </tbody> </table> <hr/> <p>所有 HTML 标签在 Markdown 中可直接嵌入使用，只要 Markdown 渲染器支持（如 GitHub、Jekyll、Obsidian）。</p> <hr/> <h2 id="二在-vs-code-中高效使用-html--markdown">二、在 VS Code 中高效使用 HTML + Markdown</h2> <hr/> <h3 id="1-自动补全-markdown-语法">1. 自动补全 Markdown 语法</h3> <hr/> <p>VS Code 对 Markdown 提供原生语法补全：</p> <ul> <li>输入 <code class="language-plaintext highlighter-rouge">**</code> → 自动生成 <code class="language-plaintext highlighter-rouge">**|**</code></li> <li>输入 <code class="language-plaintext highlighter-rouge">*</code> → 自动生成 <code class="language-plaintext highlighter-rouge">*|*</code></li> <li>输入 <code class="language-plaintext highlighter-rouge">~~</code> → 自动生成 <code class="language-plaintext highlighter-rouge">~~|~~</code></li> </ul> <p>常用于加粗、斜体、删除线等</p> <hr/> <h3 id="2-emmet-快捷键包裹-html-标签">2. Emmet 快捷键包裹 HTML 标签</h3> <hr/> <p>Markdown 不支持 <code class="language-plaintext highlighter-rouge">&lt;mark&gt;</code>、<code class="language-plaintext highlighter-rouge">&lt;u&gt;</code> 等格式？用 Emmet 来救场！</p> <p><strong><mark>操作步骤</mark></strong></p> <ol> <li>选中 Markdown 文本</li> <li>使用命令面板（Shift+Cmd+P / Ctrl+Shift+P）或快捷键</li> <li>搜索并执行：<code class="language-plaintext highlighter-rouge">Emmet: Wrap with Abbreviation</code></li> <li>输入如 <code class="language-plaintext highlighter-rouge">mark</code>、<code class="language-plaintext highlighter-rouge">u</code>、<code class="language-plaintext highlighter-rouge">del</code> 等标签 → 自动包裹</li> </ol> <p><strong><mark>示例</mark></strong></p> <ul> <li>原始文本：<code class="language-plaintext highlighter-rouge">需要高亮的部分</code></li> <li>选中后 → 执行 → 输入 <code class="language-plaintext highlighter-rouge">mark</code> → 变成：<mark>需要高亮的部分</mark></li> </ul> <hr/> <h3 id="3-绑定快捷键推荐shift--space">3. 绑定快捷键（推荐：Shift + Space）</h3> <hr/> <p>让 Emmet 包裹操作更快捷！</p> <ol> <li>打开快捷键设置（Cmd+S）</li> <li>搜索 <code class="language-plaintext highlighter-rouge">emmet.wrapWithAbbreviation</code></li> <li>设置快捷键为 <code class="language-plaintext highlighter-rouge">Shift + Space</code></li> </ol> <p>设置后只需：</p> <ul> <li>选中文字</li> <li>按 <code class="language-plaintext highlighter-rouge">Shift + Space</code></li> <li>输入 <code class="language-plaintext highlighter-rouge">u</code> / <code class="language-plaintext highlighter-rouge">mark</code> / <code class="language-plaintext highlighter-rouge">del</code> 等，即可快速包裹</li> </ul> <hr/> <h2 id="三推荐-html--markdown-组合写法示例">三、推荐 HTML + Markdown 组合写法示例</h2> <hr/> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gs">**&lt;mark&gt;重点术语&lt;/mark&gt;**</span>  
<span class="ge">_&lt;u&gt;强调句子&lt;/u&gt;_</span>
</code></pre></div></div> <p><strong><mark>重点术语</mark></strong><br/> <em><u>强调句子</u></em></p>]]></content><author><name></name></author><category term="Internet"/><category term="markdown"/><category term="html"/><summary type="html"><![CDATA[通过 VS Code 快捷键与 Emmet 包裹功能，实现 Markdown 文本加粗、高亮、下划线等扩展格式，全面掌握 Markdown 语法 × HTML 标签 的实战技巧。]]></summary></entry><entry><title type="html">批量将图片文件名改为小写</title><link href="https://36525.day/blog/2025-06-21/image-file-names-to-lowercase/" rel="alternate" type="text/html" title="批量将图片文件名改为小写"/><published>2025-06-21T00:00:00-07:00</published><updated>2025-06-21T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-21/image-file-names-to-lowercase</id><content type="html" xml:base="https://36525.day/blog/2025-06-21/image-file-names-to-lowercase/"><![CDATA[<p><img src="/assets/img/blog/image-file-names-to-lowercase.svg" style="width:100%;" alt="image-file-names-to-lowercase"/></p> <hr/> <p>在使用 GitHub Pages 搭建博客的过程中，常会遇到这样的问题：本地图片能正常显示，线上却无法查看。根本原因在于：GitHub Pages 的服务器是大小写敏感的。例如，MyImage.JPG 与 myimage.JPG 在本地可能等价，但线上并不识别为同一文件。</p> <p>以下脚本能批量把指定目录下所有图片的<strong>文件名（不含扩展名）转换为小写</strong>，扩展名保持不变：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># 设置图片目录（修改成你自己的目录）</span>
<span class="nv">IMAGE_DIR</span><span class="o">=</span>~/Desktop/media

<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$IMAGE_DIR</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1

<span class="c"># 查找所有图片文件（你可以增加其他类型）</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="se">\(</span> <span class="nt">-iname</span> <span class="s2">"*.jpg"</span> <span class="nt">-o</span> <span class="nt">-iname</span> <span class="s2">"*.jpeg"</span> <span class="nt">-o</span> <span class="nt">-iname</span> <span class="s2">"*.png"</span> <span class="nt">-o</span> <span class="nt">-iname</span> <span class="s2">"*.webp"</span> <span class="se">\)</span> | <span class="k">while </span><span class="nb">read </span>f<span class="p">;</span> <span class="k">do
  </span><span class="nb">dir</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="si">)</span>
  <span class="nv">filename</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="si">)</span>
  <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">filename</span><span class="p">%.*</span><span class="k">}</span><span class="s2">"</span>         <span class="c"># 文件名（不含扩展名）</span>
  <span class="nv">ext</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">filename</span><span class="p">##*.</span><span class="k">}</span><span class="s2">"</span>         <span class="c"># 扩展名</span>

  <span class="c"># 生成小写文件名</span>
  <span class="nv">lower_name</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$name</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span>
  <span class="nv">new_file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$dir</span><span class="s2">/</span><span class="nv">$lower_name</span><span class="s2">.</span><span class="nv">$ext</span><span class="s2">"</span>

  <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="nv">$new_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$new_file</span><span class="s2">"</span>
  <span class="k">fi
done</span>
</code></pre></div></div> <hr/> <p><strong><mark>使用方法</mark></strong></p> <hr/> <p>将脚本保存为 <code class="language-plaintext highlighter-rouge">xxxx.sh</code><br/> 替换 IMAGE_DIR=… 为你图片所在目录路径<br/> 赋予执行权限并运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x xxxx.sh
./xxxx.sh
</code></pre></div></div> <p>这样可避免线上图片加载失败的问题，确保文件名和引用路径一致。</p>]]></content><author><name></name></author><category term="Internet"/><category term="bash"/><category term="gh-pages"/><summary type="html"><![CDATA[使用 Bash 脚本批量将图片文件名统一转换为小写，解决 GitHub Pages 线上图片因大小写敏感导致无法显示的问题。]]></summary></entry><entry><title type="html">GitHub Pages + Cloudflare 自定义域名 HTTPS 配置指南</title><link href="https://36525.day/blog/2025-06-20/https-github-pages-and-cloudflare/" rel="alternate" type="text/html" title="GitHub Pages + Cloudflare 自定义域名 HTTPS 配置指南"/><published>2025-06-20T00:00:00-07:00</published><updated>2025-06-20T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-20/https-github-pages-and-cloudflare</id><content type="html" xml:base="https://36525.day/blog/2025-06-20/https-github-pages-and-cloudflare/"><![CDATA[<p><img src="/assets/img/blog/https-github-pages-and-cloudflare.svg" style="width:100%;" alt="https-github-pages-and-cloudflare"/></p> <p>借助 GitHub Pages 托管静态网站，再通过 Cloudflare 实现 DNS 管理、HTTPS 加密与全球加速，是构建高效、安全个人博客或站点的现代主流方案。 本文将手把手带你配置自定义域名（如 <code class="language-plaintext highlighter-rouge">xxxx.xx</code>），实现 HTTPS 安全访问，并解决常见的证书问题如 <code class="language-plaintext highlighter-rouge">Enforce HTTPS — Unavailable</code> 和 <code class="language-plaintext highlighter-rouge">SSL 526 错误</code>。</p> <hr/> <h2 id="一准备工作">一、准备工作</h2> <hr/> <table> <thead> <tr> <th>事项</th> <th>状态说明</th> </tr> </thead> <tbody> <tr> <td>你已有一个域名</td> <td>例如：xxxx.xx</td> </tr> <tr> <td>使用 GitHub Pages</td> <td>仓库已启用 Pages 功能</td> </tr> <tr> <td>使用 Cloudflare</td> <td>DNS 已接管（更换 NS 服务器）</td> </tr> </tbody> </table> <hr/> <h2 id="二配置-cloudflare-dns">二、配置 Cloudflare DNS</h2> <hr/> <h3 id="裸域如-xxxxxx添加-a-记录">裸域（如 <code class="language-plaintext highlighter-rouge">xxxx.xx</code>）添加 A 记录</h3> <hr/> <p>进入 Cloudflare → <code class="language-plaintext highlighter-rouge">DNS</code>，添加以下 4 条 A 记录，并开启代理（橙色云 ☁️）：</p> <table> <thead> <tr> <th>类型</th> <th>名称</th> <th>值</th> <th>代理状态</th> </tr> </thead> <tbody> <tr> <td>A</td> <td>@</td> <td>185.199.108.153</td> <td>☁️ Proxied</td> </tr> <tr> <td>A</td> <td>@</td> <td>185.199.109.153</td> <td>☁️ Proxied</td> </tr> <tr> <td>A</td> <td>@</td> <td>185.199.110.153</td> <td>☁️ Proxied</td> </tr> <tr> <td>A</td> <td>@</td> <td>185.199.111.153</td> <td>☁️ Proxied</td> </tr> </tbody> </table> <p>这些是 GitHub Pages 官方静态 IP 地址。务必开启橙色云，否则 Cloudflare 无法提供 HTTPS 代理功能。</p> <hr/> <h2 id="三配置-cloudflare-ssl启用-https">三、配置 Cloudflare SSL（启用 HTTPS）</h2> <hr/> <h3 id="1-开启-universal-ssl自动证书">1. 开启 Universal SSL（自动证书）</h3> <hr/> <p>路径：<code class="language-plaintext highlighter-rouge">SSL/TLS → Edge Certificates</code> 确认你看到有效证书（例如）：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>通用证书：xxxx.xx, *.xxxx.xx（由 Cloudflare 管理）
</code></pre></div></div> <hr/> <h3 id="2-设置正确的-ssl-模式">2. 设置正确的 SSL 模式</h3> <hr/> <p>路径：<code class="language-plaintext highlighter-rouge">SSL/TLS → Overview</code> 选择：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>✅ Full
</code></pre></div></div> <p>千万不要使用 <code class="language-plaintext highlighter-rouge">Strict</code> 模式，它会导致 GitHub Pages 无法验证域名控制权，从而签发 HTTPS 失败。</p> <hr/> <h2 id="四配置-github-仓库">四、配置 GitHub 仓库</h2> <hr/> <h3 id="添加-cname-文件必须">添加 CNAME 文件（必须）</h3> <hr/> <p>在仓库根目录添加 <code class="language-plaintext highlighter-rouge">CNAME</code> 文件（无扩展名），内容仅为你绑定的域名：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxxx.xx
</code></pre></div></div> <p>提交并推送至 GitHub。</p> <hr/> <h2 id="五启用-github-pages-并绑定域名">五、启用 GitHub Pages 并绑定域名</h2> <hr/> <p>进入 GitHub 仓库 → <code class="language-plaintext highlighter-rouge">Settings → Pages</code>：</p> <ul> <li> <p>Custom domain 填入：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxxx.xx
</code></pre></div> </div> </li> <li> <p>等待几分钟，GitHub 将尝试自动签发 HTTPS 证书。</p> </li> <li> <p>成功后，启用选项：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>✅ Enforce HTTPS
</code></pre></div> </div> </li> </ul> <hr/> <h3 id="1-如-enforce-https-无法启用怎么办">1. 如 Enforce HTTPS 无法启用，怎么办？</h3> <hr/> <p>如果看到：</p> <p><code class="language-plaintext highlighter-rouge">Enforce HTTPS — Unavailable for your site because your domain is not properly configured to support HTTPS</code></p> <p>说明 GitHub <strong>无法验证你的域名所有权</strong>，常见原因：<strong>Cloudflare 开启了代理，GitHub 无法验证域名</strong>。</p> <hr/> <h3 id="2-解决方法">2. 解决方法</h3> <hr/> <ol> <li>暂时将 Cloudflare 中的 4 条 A 记录的代理状态改为「灰色云」（DNS only）</li> <li>等待 3~15 分钟，GitHub 成功签发证书后，<code class="language-plaintext highlighter-rouge">Enforce HTTPS</code> 将变为可用</li> <li>勾选启用后，将 Cloudflare 的 A 记录重新改回「橙色云 ☁️」</li> </ol> <hr/> <h2 id="六附加推荐绑定-www-子域--裸域跳转">六、附加推荐：绑定 www 子域 + 裸域跳转</h2> <hr/> <h3 id="1-添加-www-子域">1. 添加 www 子域</h3> <hr/> <p>Cloudflare → DNS 添加：</p> <table> <thead> <tr> <th>类型</th> <th>名称</th> <th>值</th> <th>代理状态</th> </tr> </thead> <tbody> <tr> <td>CNAME</td> <td>www</td> <td>yourname.github.io</td> <td>☁️ Proxied</td> </tr> </tbody> </table> <hr/> <h3 id="2-设置裸域自动跳转至-www">2. 设置裸域自动跳转至 www</h3> <hr/> <p>Cloudflare → <code class="language-plaintext highlighter-rouge">Rules → Redirect Rules</code> 添加规则：</p> <ul> <li>If hostname = <code class="language-plaintext highlighter-rouge">xxxx.xx</code> → 301 重定向至 <code class="language-plaintext highlighter-rouge">https://www.xxxx.xx</code></li> </ul> <p>好处：</p> <ul> <li>避免裸域 SSL 验证问题</li> <li>用户访问裸域自动跳转，提升兼容性</li> </ul> <hr/> <h2 id="七常见问题速查">七、常见问题速查</h2> <hr/> <table> <thead> <tr> <th>问题</th> <th>可能原因</th> <th>解决方式</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">Enforce HTTPS</code> 无法启用</td> <td>Cloudflare 开启代理阻止 GitHub 验证</td> <td>临时关闭代理（灰色云），等待签发后再开启</td> </tr> <tr> <td>报错 526 或 SSL 无效</td> <td>使用了 <code class="language-plaintext highlighter-rouge">Full (Strict)</code>，GitHub 证书尚未签发</td> <td>暂时改为 <code class="language-plaintext highlighter-rouge">Full</code> 模式，签发成功后再切回 <code class="language-plaintext highlighter-rouge">Strict</code></td> </tr> <tr> <td>访问裸域无效</td> <td>没配置 A 记录或未开启代理</td> <td>添加 4 条 A 记录并开启 ☁️ 代理</td> </tr> <tr> <td>证书看起来不是 GitHub 的</td> <td>实际是 Cloudflare 的边缘证书</td> <td>正常现象，Cloudflare 使用自己的证书在边缘节点处理</td> </tr> </tbody> </table> <hr/> <h2 id="八总结配置顺序">八、总结配置顺序</h2> <hr/> <ol> <li>添加 4 条裸域 A 记录（185.199.x.x），开启代理 ☁️</li> <li>添加仓库根目录 <code class="language-plaintext highlighter-rouge">CNAME</code> 文件，填入域名</li> <li>在 GitHub Pages 设置中绑定域名，等待 HTTPS 自动签发</li> <li>若 <code class="language-plaintext highlighter-rouge">Enforce HTTPS</code> 无法启用：临时关闭 Cloudflare 代理（灰色云），等待生效</li> <li>成功后启用 <code class="language-plaintext highlighter-rouge">Enforce HTTPS</code>，再改回橙色云 ☁️</li> <li>（推荐）添加 <code class="language-plaintext highlighter-rouge">www</code> 子域并设置裸域跳转</li> </ol>]]></content><author><name></name></author><category term="Internet"/><category term="gh-pages"/><category term="cloudflare"/><summary type="html"><![CDATA[使用 GitHub Pages 与 Cloudflare 配置自定义域名与 HTTPS，加速部署个人网站。Configure custom domains and HTTPS with GitHub Pages and Cloudflare to securely deploy personal websites.]]></summary></entry><entry><title type="html">使用 ImageMagick 批量转换 JPG 为 WebP 格式，提升网页性能</title><link href="https://36525.day/blog/2025-06-20/imagemagick-convert-jpg-to-webp/" rel="alternate" type="text/html" title="使用 ImageMagick 批量转换 JPG 为 WebP 格式，提升网页性能"/><published>2025-06-20T00:00:00-07:00</published><updated>2025-06-20T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-20/imagemagick-convert-jpg-to-webp</id><content type="html" xml:base="https://36525.day/blog/2025-06-20/imagemagick-convert-jpg-to-webp/"><![CDATA[<p><img src="/assets/img/blog/imagemagick-convert-jpg-to-webp.svg" style="width:100%;" alt="imagemagick-convert-jpg-to-webp"/></p> <p>在现代网页优化中，图片格式的选择和压缩率直接影响页面加载速度和用户体验。WebP 作为一种现代图片格式，兼具优秀的压缩率和较好的兼容性，已被广泛应用于网站图片优化。本文介绍如何使用开源工具 ImageMagick 实现本地批量将 JPG 图片转换为 WebP 格式，简洁高效，适合开发者和设计师。</p> <hr/> <h2 id="一为什么选择-webp">一、为什么选择 WebP？</h2> <hr/> <p>WebP 是由 Google 推出的图片格式，支持有损和无损压缩，文件大小相比传统 JPEG 和 PNG 格式大幅减小，能有效提升网站加载速度，降低带宽使用。</p> <ul> <li><strong>有损压缩</strong>：适合照片类图片，文件更小，质量可调</li> <li><strong>无损压缩</strong>：适合图标、透明背景图片，保证图像质量</li> </ul> <p>兼容主流浏览器（Chrome、Firefox、Edge、Safari 14+），是目前网页图片优化的首选格式。</p> <hr/> <h2 id="二imagemagick-简介">二、ImageMagick 简介</h2> <hr/> <p>ImageMagick 是强大的开源图像处理工具，支持超过 200 种图片格式转换。通过命令行，开发者可以快速批量处理图片，执行格式转换、尺寸调整、水印添加等多种操作。</p> <hr/> <h2 id="三环境准备">三、环境准备</h2> <hr/> <ul> <li> <p><strong>macOS 用户</strong>：推荐通过 Homebrew 安装</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>imagemagick
</code></pre></div> </div> </li> <li> <p><strong>Linux 用户</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>imagemagick
</code></pre></div> </div> </li> </ul> <hr/> <h2 id="四批量转换脚本示例">四、批量转换脚本示例</h2> <hr/> <p>假设你的 JPG 图片都存放在 <code class="language-plaintext highlighter-rouge">~/Desktop/media</code> 文件夹，执行以下 Bash 脚本即可将所有 JPG 转换为 WebP，转换结果放在 <code class="language-plaintext highlighter-rouge">webp_output</code> 子目录：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">INPUT_DIR</span><span class="o">=</span>~/Desktop/media
<span class="nv">OUTPUT_DIR</span><span class="o">=</span>~/Desktop/media/webp_output

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$OUTPUT_DIR</span><span class="s2">"</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$INPUT_DIR</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit

</span><span class="k">for </span>img <span class="k">in</span> <span class="k">*</span>.jpg <span class="k">*</span>.jpeg<span class="p">;</span> <span class="k">do
  </span>magick convert <span class="s2">"</span><span class="nv">$img</span><span class="s2">"</span> <span class="nt">-quality</span> 80 <span class="s2">"</span><span class="nv">$OUTPUT_DIR</span><span class="s2">/</span><span class="k">${</span><span class="nv">img</span><span class="p">%.jpg</span><span class="k">}</span><span class="s2">.webp"</span>
  <span class="nb">echo</span> <span class="s2">"Converted </span><span class="nv">$img</span><span class="s2"> to WebP."</span>
<span class="k">done

</span><span class="nb">echo</span> <span class="s2">"All images converted and saved in </span><span class="nv">$OUTPUT_DIR</span><span class="s2">"</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">-quality 80</code> 参数控制压缩质量，范围 0-100，80 是常用的高质量设置</li> <li>输出目录分离，避免覆盖源文件</li> </ul> <hr/> <h2 id="五运行步骤">五、运行步骤</h2> <hr/> <ol> <li> <p>将上述脚本保存为 <code class="language-plaintext highlighter-rouge">convert_webp.sh</code>，赋予执行权限：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x convert_webp.sh
</code></pre></div> </div> </li> <li> <p>执行脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./convert_webp.sh
</code></pre></div> </div> </li> <li> <p>等待完成后，检查 <code class="language-plaintext highlighter-rouge">webp_output</code> 文件夹，查看转换结果</p> </li> </ol> <ul> <li><code class="language-plaintext highlighter-rouge">WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"</code>，这是 ImageMagick 7 版本的新变化提醒，建议以后用 magick convert 或直接用 magick 命令代替 convert，但你脚本里用 magick convert 就是正确的。</li> </ul> <hr/> <h2 id="六总结">六、总结</h2> <hr/> <p>通过 ImageMagick 批量转换图片格式，开发者可以方便快捷地将 JPG 图片转换为更高效的 WebP 格式，从而提升网页加载性能和用户体验。结合自动化脚本，批量处理大批量图片变得轻松简单。</p>]]></content><author><name></name></author><category term="Internet"/><category term="image-magick"/><category term="webp"/><category term="bash"/><summary type="html"><![CDATA[介绍如何使用 ImageMagick 在本地批量将 JPG 图片转换为 WebP 格式，有效减小图片体积、提升网页加载速度，并提供适用于 macOS、Linux 的完整脚本与操作指南。]]></summary></entry><entry><title type="html">用 Python 脚本自动同步 Markdown 文章 Front Matter 的图片链接</title><link href="https://36525.day/blog/2025-06-20/python-update-frontmatter-link/" rel="alternate" type="text/html" title="用 Python 脚本自动同步 Markdown 文章 Front Matter 的图片链接"/><published>2025-06-20T00:00:00-07:00</published><updated>2025-06-20T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-20/python-update-frontmatter-link</id><content type="html" xml:base="https://36525.day/blog/2025-06-20/python-update-frontmatter-link/"><![CDATA[<p><img src="/assets/img/blog/python-update-frontmatter-link.svg" style="width:100%;" alt="python-update-frontmatter-link"/></p> <h2 id="一背景">一、背景</h2> <hr/> <p>在修改 Markdown 文章时，通常需要为每篇文章设置 <code class="language-plaintext highlighter-rouge">og_image</code>（社交分享图）和 <code class="language-plaintext highlighter-rouge">thumbnail</code>（缩略图）。手动维护这两个字段往往费时且易错，尤其当图片文件名与文章文件名严格对应时，自动化脚本就能派上用场。通过简单的 Python 脚本，批量更新博客文章 Front Matter 中的 <code class="language-plaintext highlighter-rouge">og_image</code> 和 <code class="language-plaintext highlighter-rouge">thumbnail</code> 字段，使其和本地图片文件名保持一致，极大提升内容维护效率。</p> <hr/> <h2 id="二需求分析">二、需求分析</h2> <hr/> <ul> <li>博客文章位于 <code class="language-plaintext highlighter-rouge">_posts</code> 文件夹，文件名格式形如： <code class="language-plaintext highlighter-rouge">2025-06-20-my-post.md</code></li> <li>对应图片存放在 <code class="language-plaintext highlighter-rouge">assets/img/blog/</code>，图片文件名形如： <code class="language-plaintext highlighter-rouge">my-post.webp</code></li> <li>希望自动将每篇文章 Front Matter 中的 <code class="language-plaintext highlighter-rouge">og_image</code> 和 <code class="language-plaintext highlighter-rouge">thumbnail</code> 指向对应图片的路径： <code class="language-plaintext highlighter-rouge">/assets/img/blog/my-post.webp</code></li> <li>如果字段不存在，自动插入 <code class="language-plaintext highlighter-rouge">og_image</code> 在前、<code class="language-plaintext highlighter-rouge">thumbnail</code> 在后</li> <li>不修改正文内容，仅处理 Front Matter</li> <li>保持原有的图片路径前缀，替换文件名部分</li> </ul> <hr/> <h2 id="三解决方案">三、解决方案</h2> <hr/> <p>利用 Python 脚本遍历所有文章，匹配对应图片文件，更新 Front Matter 中相关字段。核心步骤：</p> <ol> <li><strong>文件匹配规则</strong> 去除文章文件名前的日期前缀（如 <code class="language-plaintext highlighter-rouge">2025-06-20-</code>），得到 slug</li> <li><strong>路径构造</strong> 拼接图片目录路径，检查图片文件是否存在</li> <li><strong>Front Matter 读取与修改</strong> 定位 YAML 头部区域，查找 <code class="language-plaintext highlighter-rouge">og_image</code> 和 <code class="language-plaintext highlighter-rouge">thumbnail</code> 字段</li> <li><strong>字段更新或插入</strong> 替换或新增字段，保证字段顺序和内容正确</li> <li><strong>写回文件</strong></li> </ol> <hr/> <h2 id="四最终脚本展示-update_thumbnailpy">四、最终脚本展示 <code class="language-plaintext highlighter-rouge">update_thumbnail.py</code></h2> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>

<span class="c1"># === 设置目录 ===
</span><span class="n">posts_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./_posts</span><span class="sh">'</span>
<span class="n">img_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./assets/img/blog</span><span class="sh">'</span>

<span class="c1"># 获取 Markdown 文件列表（按字母排序）
</span><span class="n">post_files</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.md</span><span class="sh">'</span><span class="p">)])</span>


<span class="k">for</span> <span class="n">post_file</span> <span class="ow">in</span> <span class="n">post_files</span><span class="p">:</span>
    <span class="n">post_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">splitext</span><span class="p">(</span><span class="n">post_file</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># 🟡 去除日期前缀，只保留 slug 作为图片名匹配
</span>    <span class="n">slug</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^\d{4}-\d{2}-\d{2}-</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="n">post_name</span><span class="p">)</span>
    <span class="n">expected_img</span> <span class="o">=</span> <span class="n">slug</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.webp</span><span class="sh">"</span>
    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_dir</span><span class="p">,</span> <span class="n">expected_img</span><span class="p">)</span>

    <span class="c1"># 如果图片不存在，跳过
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">img_path</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">⚠️ 缺少图片：</span><span class="si">{</span><span class="n">expected_img</span><span class="si">}</span><span class="s">，跳过 </span><span class="si">{</span><span class="n">post_file</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">continue</span>

    <span class="n">img_name</span> <span class="o">=</span> <span class="n">expected_img</span>
    <span class="n">img_web_path</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">/assets/img/blog/</span><span class="si">{</span><span class="n">img_name</span><span class="si">}</span><span class="sh">"</span>

    <span class="c1"># === 读取文章内容 ===
</span>    <span class="n">post_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">,</span> <span class="n">post_file</span><span class="p">)</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">post_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>

    <span class="c1"># === 定位 Front Matter（YAML）范围 ===
</span>    <span class="n">in_front_matter</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">front_matter_end_idx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="o">==</span> <span class="sh">'</span><span class="s">---</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">in_front_matter</span><span class="p">:</span>
                <span class="n">in_front_matter</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">front_matter_end_idx</span> <span class="o">=</span> <span class="n">idx</span>
                <span class="k">break</span>

    <span class="n">fm_lines</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">front_matter_end_idx</span><span class="p">]</span>
    <span class="n">new_fm_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">og_image_found</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">thumbnail_found</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fm_lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^(thumbnail:|og_image:)\s*(.+)$</span><span class="sh">'</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">field_name</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">old_path</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">prefix_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(.*/)</span><span class="sh">'</span><span class="p">,</span> <span class="n">old_path</span><span class="p">)</span>
            <span class="n">prefix</span> <span class="o">=</span> <span class="n">prefix_match</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">prefix_match</span> <span class="k">else</span> <span class="sh">"</span><span class="s">/assets/img/blog/</span><span class="sh">"</span>
            <span class="n">new_path</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="n">img_name</span>
            <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">field_name</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">new_path</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">field_name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">og_image:</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">og_image_found</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">elif</span> <span class="n">field_name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">thumbnail:</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">thumbnail_found</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>

    <span class="c1"># === 插入字段（如果不存在） ===
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">og_image_found</span><span class="p">:</span>
        <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">og_image: </span><span class="si">{</span><span class="n">img_web_path</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">thumbnail_found</span><span class="p">:</span>
        <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">thumbnail: </span><span class="si">{</span><span class="n">img_web_path</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># === 写回文件：更新后的 Front Matter + 原正文 ===
</span>    <span class="n">new_lines</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">---</span><span class="se">\n</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">new_fm_lines</span> <span class="o">+</span> <span class="p">[</span><span class="sh">'</span><span class="s">---</span><span class="se">\n</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">front_matter_end_idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">post_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">writelines</span><span class="p">(</span><span class="n">new_lines</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">✅ 已更新 Front Matter：</span><span class="si">{</span><span class="n">post_file</span><span class="si">}</span><span class="s"> → 图片 </span><span class="si">{</span><span class="n">img_name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h2 id="五使用说明">五、使用说明</h2> <hr/> <ul> <li> <p>将脚本保存为 <code class="language-plaintext highlighter-rouge">update_thumbnail.py</code> 放在文件夹根目录（比如<code class="language-plaintext highlighter-rouge">xx</code>）</p> </li> <li> <p>确保目录结构如下：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xx/
├── update_thumbnail.py
├── _posts/
│   ├── 2025-06-20-my-post.md
│   └── ...
└── assets/
    └── img/
        └── blog/
            ├── my-post.webp
            └── ...
</code></pre></div> </div> </li> <li> <p>运行脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Desktop/xx
python3 update_thumbnail.py
</code></pre></div> </div> </li> </ul> <hr/> <h2 id="六处理示例">六、处理示例</h2> <hr/> <p>假设原始 Front Matter 是：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: 示例
date: 2025-06-20
---
</code></pre></div></div> <p>运行后则自动变为：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: 示例
date: 2025-06-20
og_image: /assets/img/blog/my-post.webp
thumbnail: /assets/img/blog/my-post.webp
---
</code></pre></div></div>]]></content><author><name></name></author><category term="Internet"/><category term="python"/><category term="frontmatter"/><summary type="html"><![CDATA[通过 Python 脚本批量更新 博客 Front Matter 中的图片字段，实现文章与图片文件名自动匹配，提升维护效率。]]></summary></entry><entry><title type="html">Markdown 批量更新 Front Matter 日期并重命名文件的实用脚本教程</title><link href="https://36525.day/blog/2025-06-19/markdown-frontmatter-auto-date/" rel="alternate" type="text/html" title="Markdown 批量更新 Front Matter 日期并重命名文件的实用脚本教程"/><published>2025-06-19T00:00:00-07:00</published><updated>2025-06-19T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-19/markdown-frontmatter-auto-date</id><content type="html" xml:base="https://36525.day/blog/2025-06-19/markdown-frontmatter-auto-date/"><![CDATA[<p><img src="/assets/img/blog/markdown-frontmatter-auto-date.svg" style="width:100%;" alt="markdown-frontmatter-auto-date"/></p> <hr/> <p>在构建基于 Jekyll 或 Hugo 的博客时，标准化的 Front Matter 格式（尤其是 <code class="language-plaintext highlighter-rouge">date:</code> 字段）至关重要。本文介绍一个两步自动化方案：使用 Python 提取正文日期并插入到 YAML Front Matter 中，然后使用 Shell 脚本按 <code class="language-plaintext highlighter-rouge">date:</code> 重命名所有 Markdown 文件。</p> <hr/> <h2 id="一目标">一、目标</h2> <hr/> <ul> <li>自动从 Markdown 正文中提取 <code class="language-plaintext highlighter-rouge">YYYY/MM/DD</code>，<code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code>格式的日期</li> <li>将其转为标准格式 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code></li> <li>添加或更新 <code class="language-plaintext highlighter-rouge">date:</code> 字段到 Front Matter 中</li> <li>根据 <code class="language-plaintext highlighter-rouge">date:</code> 字段重命名文件为 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-filename.md</code></li> </ul> <hr/> <h2 id="二使用-python-脚本自动更新-date-字段">二、使用 Python 脚本自动更新 <code class="language-plaintext highlighter-rouge">date:</code> 字段</h2> <hr/> <h3 id="1-脚本说明">1. 脚本说明</h3> <hr/> <ul> <li>搜索正文中的第一个日期（格式如 <code class="language-plaintext highlighter-rouge">2024/5/9</code>，<code class="language-plaintext highlighter-rouge">2024-5-9</code>）</li> <li>格式化为 <code class="language-plaintext highlighter-rouge">2024-05-09</code></li> <li>写入（或更新）YAML Front Matter 中的 <code class="language-plaintext highlighter-rouge">date:</code> 字段</li> </ul> <hr/> <h3 id="2-脚本代码保存为-update_datepy">2. 脚本代码（保存为 <code class="language-plaintext highlighter-rouge">update_date.py</code>）</h3> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

<span class="c1"># 找正文第一次出现 YYYY/MM/DD 格式的日期，没有跳过
</span><span class="n">date_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\d{4})/(\d{1,2})/(\d{1,2})</span><span class="sh">'</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">date_match</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">No date found in </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">, skipped</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">yyyy</span><span class="p">,</span> <span class="n">mm</span><span class="p">,</span> <span class="n">dd</span> <span class="o">=</span> <span class="n">date_match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
<span class="n">date_str</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">yyyy</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="nf">int</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="nf">int</span><span class="p">(</span><span class="n">dd</span><span class="p">)</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 判断是否有 Front Matter，分割
</span><span class="k">if</span> <span class="n">content</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">'</span><span class="s">---</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="n">content</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">---</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">fm</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

    <span class="c1"># 替换或新增 date: 字段
</span>    <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^date:\s*.*$</span><span class="sh">'</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">MULTILINE</span><span class="p">):</span>
        <span class="n">fm_new</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^date:\s*.*$</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">MULTILINE</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">fm_new</span> <span class="o">=</span> <span class="n">fm</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span>

    <span class="n">new_content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">---</span><span class="si">{</span><span class="n">fm_new</span><span class="si">}</span><span class="s">---</span><span class="si">{</span><span class="n">body</span><span class="si">}</span><span class="sh">"</span>

<span class="k">else</span><span class="p">:</span>
    <span class="c1"># 没有 Front Matter，新增一个
</span>    <span class="n">new_content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">---</span><span class="se">\n</span><span class="s">date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="se">\n</span><span class="s">---</span><span class="se">\n</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="sh">"</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">new_content</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Updated </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s"> with date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h2 id="三shell-脚本按-date-字段批量重命名文件">三、Shell 脚本按 <code class="language-plaintext highlighter-rouge">date:</code> 字段批量重命名文件</h2> <hr/> <h3 id="1-脚本代码可保存为-rename_by_datesh">1. 脚本代码（可保存为 <code class="language-plaintext highlighter-rouge">rename_by_date.sh</code>）</h3> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.md<span class="p">;</span> <span class="k">do
  </span><span class="nv">date_prefix</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-m1</span> <span class="s1">'^date:'</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/date:[[:space:]]*([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/'</span><span class="si">)</span>
  <span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$date_prefix</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">new_name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">date_prefix</span><span class="k">}</span><span class="s2">-</span><span class="nv">$file</span><span class="s2">"</span>
    <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$new_name</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"Renamed </span><span class="nv">$file</span><span class="s2"> → </span><span class="nv">$new_name</span><span class="s2">"</span>
  <span class="k">fi
done</span>
</code></pre></div></div> <hr/> <h3 id="2-整段逻辑说明">2. 整段逻辑说明</h3> <hr/> <table> <thead> <tr> <th>代码片段</th> <th>作用说明</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">for file in *.md; do ... done</code></td> <td>遍历当前目录下所有 Markdown 文件（<code class="language-plaintext highlighter-rouge">.md</code> 结尾）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">date_prefix=$(grep -m1 '^date:' "$file" \| sed -E '...')</code></td> <td>从文件中提取 <code class="language-plaintext highlighter-rouge">date: YYYY-MM-DD</code> 的值（例如 <code class="language-plaintext highlighter-rouge">2024-06-20</code>），并赋值给变量 <code class="language-plaintext highlighter-rouge">date_prefix</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">grep -m1 '^date:'</code></td> <td>查找开头为 <code class="language-plaintext highlighter-rouge">date:</code> 的第一行（避免多次匹配）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">sed -E 's/date:[[:space:]]*([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/'</code></td> <td>使用正则从 <code class="language-plaintext highlighter-rouge">date:</code> 这一行中提取 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> 日期</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">[[ -n "$date_prefix" ]]</code></td> <td>判断是否成功提取日期（非空）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">new_name="${date_prefix}-$file"</code></td> <td>构造新文件名：在原文件名前加上日期前缀，如 <code class="language-plaintext highlighter-rouge">2025-06-20-xxx.md</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">mv "$file" "$new_name"</code></td> <td>使用 <code class="language-plaintext highlighter-rouge">mv</code> 命令将原文件重命名</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">echo "Renamed $file → $new_name"</code></td> <td>输出重命名日志，提示用户本次处理的文件名变更</td> </tr> </tbody> </table> <hr/> <h3 id="3-效果示例">3. 效果示例</h3> <hr/> <table> <thead> <tr> <th>原始文件名</th> <th>文件内容中的日期字段</th> <th>执行后文件名</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">article.md</code></td> <td><code class="language-plaintext highlighter-rouge">date: 2024/06/20</code></td> <td><code class="language-plaintext highlighter-rouge">2024-06-20-article.md</code></td> </tr> </tbody> </table> <hr/> <h2 id="四使用方法终端中执行">四、使用方法（终端中执行）</h2> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Desktop/drafts  <span class="c"># 切换到你的 Markdown 文件夹</span>
<span class="c"># 逐个文件调用 Python 脚本</span>
<span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.md<span class="p">;</span> <span class="k">do </span>python3 ../update_date.py <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span>
<span class="c"># 然后执行重命名脚本</span>
bash rename_by_date.sh
</code></pre></div></div>]]></content><author><name></name></author><category term="Internet"/><category term="markdown"/><category term="frontmatter"/><category term="python"/><category term="bash"/><summary type="html"><![CDATA[利用 Python 与 Shell 脚本，从正文提取日期并自动写入或更新 YAML Front Matter 中的 date 字段，并批量按日期重命名文件名，适用于静态博客内容管理。]]></summary></entry><entry><title type="html">macOS 本地从零开始配置 Prettier + VS Code</title><link href="https://36525.day/blog/2025-06-18/prettier-nodejs-vscode/" rel="alternate" type="text/html" title="macOS 本地从零开始配置 Prettier + VS Code"/><published>2025-06-18T00:00:00-07:00</published><updated>2025-06-18T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-18/prettier-nodejs-vscode</id><content type="html" xml:base="https://36525.day/blog/2025-06-18/prettier-nodejs-vscode/"><![CDATA[<p><img src="/assets/img/blog/prettier-nodejs-vscode.svg" style="width:100%;" alt="prettier-nodejs-vscode"/></p> <hr/> <p>本指南适用于希望<strong>批量格式化 Markdown、YAML、HTML、JS、CSS 等文件</strong>的用户，尤其适合使用 VS Code 的用户。</p> <hr/> <h2 id="一安装-nodejs推荐使用-homebrew">一、安装 Node.js（推荐使用 Homebrew）</h2> <hr/> <p>Prettier 依赖 Node.js 环境，建议通过 Homebrew 安装，便于更新与管理。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>node
</code></pre></div></div> <p>安装完成后，在终端运行验证命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node <span class="nt">-v</span>
npm <span class="nt">-v</span>
</code></pre></div></div> <p>示例输出：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>v22.16.0
10.9.2
</code></pre></div></div> <hr/> <h3 id="常见问题">常见问题</h3> <hr/> <p>如遇 <code class="language-plaintext highlighter-rouge">zsh: command not found: node</code>，请确认路径是否加入环境变量：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/opt/homebrew/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">source</span> ~/.zprofile
</code></pre></div></div> <hr/> <h2 id="二在项目中安装-prettier">二、在项目中安装 Prettier</h2> <hr/> <p>进入你的项目目录（如 <code class="language-plaintext highlighter-rouge">xxxx.github.io</code>）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/xx/xxxx.github.io
</code></pre></div></div> <p>安装 Prettier 到项目开发依赖中：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> prettier
</code></pre></div></div> <p>安装成功后，目录中会出现：</p> <ul> <li><code class="language-plaintext highlighter-rouge">node_modules/</code></li> <li><code class="language-plaintext highlighter-rouge">package-lock.json</code></li> <li><code class="language-plaintext highlighter-rouge">package.json</code>（如原本不存在会自动生成）</li> </ul> <hr/> <h2 id="三安装-vs-code-插件prettier">三、安装 VS Code 插件：Prettier</h2> <hr/> <ol> <li>打开 VS Code</li> <li>前往扩展商店，搜索并安装：</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prettier - Code formatter
</code></pre></div></div> <hr/> <h2 id="四配置-vs-code-自动格式化">四、配置 VS Code 自动格式化</h2> <hr/> <p>打开 <code class="language-plaintext highlighter-rouge">settings.json</code>（打开命令面板：<code class="language-plaintext highlighter-rouge">Cmd + Shift + P</code>，命令面板中搜索 <code class="language-plaintext highlighter-rouge">Preferences: Open Settings (JSON)</code>），添加以下内容：</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>自动保存。如你只希望对特定语言启用（如 Markdown）：</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"[markdown]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h2 id="五配置-prettier-行为可选">五、配置 Prettier 行为（可选）</h2> <hr/> <h3 id="1-创建-prettierrc-文件">1. 创建 <code class="language-plaintext highlighter-rouge">.prettierrc</code> 文件</h3> <hr/> <p>在项目根目录创建 <code class="language-plaintext highlighter-rouge">.prettierrc</code> 文件，自定义格式规则。例如：</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"tabWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"useTabs"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"semi"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"singleQuote"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"trailingComma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
  </span><span class="nl">"proseWrap"</span><span class="p">:</span><span class="w"> </span><span class="s2">"preserve"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="2-创建-prettierignore-文件">2. 创建 <code class="language-plaintext highlighter-rouge">.prettierignore</code> 文件</h3> <hr/> <p>可用于排除不希望格式化的路径，例如：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node_modules
_site
_assets
docs/vendor
*.min.js
</code></pre></div></div> <hr/> <h2 id="六批量格式化项目文件">六、批量格式化项目文件</h2> <hr/> <p>在项目根目录运行以下命令格式化所有支持的文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="nb">.</span> <span class="nt">--write</span>
</code></pre></div></div> <p>可选用法（推荐）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="s2">"**/*.{md,yml,yaml,html,json,css,js}"</span> <span class="nt">--write</span>
</code></pre></div></div> <p>仅检查格式（不会修改文件）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="nb">.</span> <span class="nt">--check</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Internet"/><category term="vscode"/><category term="prettier"/><summary type="html"><![CDATA[本文详细介绍如何在 macOS 本地通过 Homebrew 安装 Node.js，并结合 Prettier 与 VS Code，实现对 Markdown、YAML、HTML、JS 等常见格式的自动与批量格式化。]]></summary></entry><entry><title type="html">危机生存法则 / Crisis Survival Rules</title><link href="https://36525.day/blog/2025-06-17/crisis-survival-rules/" rel="alternate" type="text/html" title="危机生存法则 / Crisis Survival Rules"/><published>2025-06-17T00:00:00-07:00</published><updated>2025-06-17T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-17/crisis-survival-rules</id><content type="html" xml:base="https://36525.day/blog/2025-06-17/crisis-survival-rules/"><![CDATA[<p><img src="/assets/img/blog/" style="width:100%;" alt=""/></p> <hr/> <h2 id="危机生存法则">危机生存法则</h2> <hr/> <p>生命被挟持，求援无声，体制沉默。<br/> 指责外界？不过是 <strong><mark>风中微弱的叹息</mark></strong>，<u>徒劳且危险</u>。<br/> 此刻，你须自主求生。这不是选择，而是唯一的出路。</p> <p>在刀锋与暗影下，你必须保持冷静。让呼吸深而缓，让心跳回归平静。<br/> <strong><mark>情绪是燃烧的野火</mark></strong>，会模糊视线，削弱判断。<strong><mark>言语，当如水般流淌</mark></strong>：<u>顺从，而不卑微；不激怒，只求生存</u>。<br/> 每一次缓慢的挪动，每一次看似无意的眼神，都可能是为自己争取时间的筹码，为脱困创造转瞬即逝的契机。</p> <p>面对无为的系统，<strong><mark>不必将愤怒化作徒劳的悲吼</mark></strong>。那只会引来更深的沉默，甚至反噬。<br/> 你需 <u>智慧施压，如水滴石穿，无声却有力</u>。<br/> 每一次拨出的电话，每一次发送的信息，每一次记录的细节，都留下痕迹。 它们不是为了当即的救援，而是为了日后的追责，为了揭开那层掩盖事实的薄雾。</p> <p>社会冷漠如海，旁观者众多，却无人伸出援手。 这是 <strong><mark>残酷的现实，但绝非无望的终点</mark></strong>。<br/> 海面上仍有缝隙，你需要抓住那<u>微弱连接</u>——也许是某个擦肩而过的眼神，也许是社交媒体上一点微弱的回响。<br/> 不要寄希望于奇迹，但也<u>不要放弃任何一丝可能</u>。</p> <p>最重要的是，维护 <strong><mark>内心韧性</mark></strong>，那是你在<u>无边黑暗中唯一的灯塔</u>。<br/> 恐惧和绝望会试图吞噬你，让你失去行动的能力。 但你要反复提醒自己，你拥有<strong><mark>自主力量</mark></strong>，你能够应对。<br/> 即便身体被束缚，思想也必须自由。 那是<u>抵抗一切的最后堡垒</u>。</p> <p>在绝境中，<strong><mark>理性与坚韧</mark></strong>才是你<u>手中最锋利的剑刃</u>，为你<strong><mark>劈开一条通向生存与正义的幽径</mark></strong>。<br/> 这条路或许漫长，或许布满荆棘，但只要那微弱的火光尚存，你便有了前行的方向。</p> <hr/> <h2 id="crisis-survival-rules">Crisis Survival Rules</h2> <hr/> <p>When life is taken hostage, cries for help go unheard, and the system remains mute.<br/> Blaming the outside world? It’s but <strong><mark>a faint sigh in the wind</mark></strong>, <u>futile and dangerous</u>.<br/> In this moment, you must survive on your own. This is not a choice; it is the only way.</p> <p>Amid blades and shadows, you must stay calm. Breathe slow and deep. Steady your heartbeat.<br/> <strong><mark>Emotion is a wildfire</mark></strong>, it clouds vision and weakens judgment. Your <strong><mark>words must flow like water</mark></strong>: <u>compliant, but never submissive; unprovoking, but always alert</u>.<br/> Every slow movement, every seemingly casual glance, may buy you precious seconds, creating fleeting chances to escape.</p> <p>In the face of an inert system, <strong><mark>don't waste rage on fruitless screams</mark></strong>. They will only bring deeper silence—or retaliation.<br/> <u>Apply pressure with wisdom, like water wearing away stone, silent but unrelenting</u>.<br/> Each call you make, each message you send, each detail you record, leave a trail. Not for immediate rescue, but for future accountability, to lift the veil that hides the truth.</p> <p>Society is an ocean of apathy. Bystanders are many, but few will extend a hand. This is <strong><mark>the brutal truth, but not the end of hope</mark></strong>.<br/> There are still cracks on the surface, uyou must seize those <u>fragile threads</u>, perhaps a passing glance, perhaps a faint echo on social media.<br/> Do not rely on miracles, but <strong><mark>never give up on any sliver of possibility</mark></strong>.</p> <p>Most of all, protect your <strong><mark>inner resilience</mark></strong>, it is your <u>only lighthouse in the vast darkness</u>.<br/> Fear and despair will try to paralyze you, to strip away your will. But remind yourself again and again, you <strong><mark>hold agency</mark></strong>, you can respond.<br/> Even if your body is restrained, your mind must remain free. That is <u>the last bastion against everything</u>.</p> <p>In the depths of desperation, <strong><mark>reason and tenacity</mark></strong> are your <u>sharpest blades in hands</u>, <strong><mark>cutting a hidden path toward survival and justice</mark></strong>.<br/> The road may be long and thorny, but as long as even a faint spark remains, you have a direction to follow.</p>]]></content><author><name></name></author><category term="Notes"/><category term="crisis"/><category term="survival"/><summary type="html"><![CDATA[在生命威胁、求助无门或体制失灵的危机中，理性与坚韧才是手中最锋利的剑刃，劈开一条通向生存与正义的幽径。In times of crisis, when life is threatened, help is unavailable, or systems fail, reason and tenacity are the sharpest blades in hands, cutting a hidden path toward survival and justice.]]></summary></entry></feed>