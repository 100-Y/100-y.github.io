<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://36525.day/feed.xml" rel="self" type="application/atom+xml"/><link href="https://36525.day/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-22T04:28:59-07:00</updated><id>https://36525.day/feed.xml</id><title type="html">blank</title><subtitle>以「36525 天」为象征，这是某人用一生在写的一本书 / Symbolizing 36,525 days — a book someone writes across a lifetime </subtitle><entry><title type="html">批量将图片文件名改为小写</title><link href="https://36525.day/blog/2025-06-21/image-file-names-to-lowercase/" rel="alternate" type="text/html" title="批量将图片文件名改为小写"/><published>2025-06-21T00:00:00-07:00</published><updated>2025-06-21T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-21/image-file-names-to-lowercase</id><content type="html" xml:base="https://36525.day/blog/2025-06-21/image-file-names-to-lowercase/"><![CDATA[<h2 id="批量将图片文件名改为小写保留扩展名">批量将图片文件名改为小写（保留扩展名）</h2> <hr/> <p>在使用 GitHub Pages 搭建博客的过程中，常会遇到这样的问题：本地图片能正常显示，线上却无法查看。根本原因在于：GitHub Pages 的服务器是大小写敏感的。例如，MyImage.JPG 与 myimage.JPG 在本地可能等价，但线上并不识别为同一文件。</p> <p>以下脚本能批量把指定目录下所有图片的<strong>文件名（不含扩展名）转换为小写</strong>，扩展名保持不变：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># 设置图片目录（修改成你自己的目录）</span>
<span class="nv">IMAGE_DIR</span><span class="o">=</span>~/Desktop/media

<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$IMAGE_DIR</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1

<span class="c"># 查找所有图片文件（你可以增加其他类型）</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="se">\(</span> <span class="nt">-iname</span> <span class="s2">"*.jpg"</span> <span class="nt">-o</span> <span class="nt">-iname</span> <span class="s2">"*.jpeg"</span> <span class="nt">-o</span> <span class="nt">-iname</span> <span class="s2">"*.png"</span> <span class="nt">-o</span> <span class="nt">-iname</span> <span class="s2">"*.webp"</span> <span class="se">\)</span> | <span class="k">while </span><span class="nb">read </span>f<span class="p">;</span> <span class="k">do
  </span><span class="nb">dir</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="si">)</span>
  <span class="nv">filename</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="si">)</span>
  <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">filename</span><span class="p">%.*</span><span class="k">}</span><span class="s2">"</span>         <span class="c"># 文件名（不含扩展名）</span>
  <span class="nv">ext</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">filename</span><span class="p">##*.</span><span class="k">}</span><span class="s2">"</span>         <span class="c"># 扩展名</span>

  <span class="c"># 生成小写文件名</span>
  <span class="nv">lower_name</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$name</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span>
  <span class="nv">new_file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$dir</span><span class="s2">/</span><span class="nv">$lower_name</span><span class="s2">.</span><span class="nv">$ext</span><span class="s2">"</span>

  <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="nv">$new_file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$new_file</span><span class="s2">"</span>
  <span class="k">fi
done</span>
</code></pre></div></div> <hr/> <h2 id="使用方法">使用方法</h2> <hr/> <p>将脚本保存为 <code class="language-plaintext highlighter-rouge">xxxx.sh</code><br/> 替换 IMAGE_DIR=… 为你图片所在目录路径<br/> 赋予执行权限并运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x xxxx.sh
./xxxx.sh
</code></pre></div></div> <p>这样可避免线上图片加载失败的问题，确保文件名和引用路径一致。</p>]]></content><author><name></name></author><category term="Internet"/><category term="bash"/><category term="gh-pages"/><summary type="html"><![CDATA[使用 Bash 脚本批量将图片文件名统一转换为小写，解决 GitHub Pages 线上图片因大小写敏感导致无法显示的问题。]]></summary></entry><entry><title type="html">GitHub Pages + Cloudflare 自定义域名 HTTPS 配置指南</title><link href="https://36525.day/blog/2025-06-20/https-github-pages-and-cloudflare/" rel="alternate" type="text/html" title="GitHub Pages + Cloudflare 自定义域名 HTTPS 配置指南"/><published>2025-06-20T00:00:00-07:00</published><updated>2025-06-20T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-20/https-github-pages-and-cloudflare</id><content type="html" xml:base="https://36525.day/blog/2025-06-20/https-github-pages-and-cloudflare/"><![CDATA[<p><img src="/assets/img/blog/https-github-pages-and-cloudflare.webp" style="width:100%;" alt="https-github-pages-and-cloudflare"/></p> <p>借助 GitHub Pages 托管静态网站，再通过 Cloudflare 实现 DNS 管理、HTTPS 加密与全球加速，是构建高效、安全个人博客或站点的现代主流方案。 本文将手把手带你配置自定义域名（如 <code class="language-plaintext highlighter-rouge">xxxx.xx</code>），实现 HTTPS 安全访问，并解决常见的证书问题如 <code class="language-plaintext highlighter-rouge">Enforce HTTPS — Unavailable</code> 和 <code class="language-plaintext highlighter-rouge">SSL 526 错误</code>。</p> <hr/> <h2 id="准备工作">准备工作</h2> <hr/> <table> <thead> <tr> <th>事项</th> <th>状态说明</th> </tr> </thead> <tbody> <tr> <td>你已有一个域名</td> <td>例如：xxxx.xx</td> </tr> <tr> <td>使用 GitHub Pages</td> <td>仓库已启用 Pages 功能</td> </tr> <tr> <td>使用 Cloudflare</td> <td>DNS 已接管（更换 NS 服务器）</td> </tr> </tbody> </table> <hr/> <h2 id="配置-cloudflare-dns">配置 Cloudflare DNS</h2> <hr/> <h3 id="裸域如-xxxxxx添加-a-记录">裸域（如 <code class="language-plaintext highlighter-rouge">xxxx.xx</code>）添加 A 记录</h3> <hr/> <p>进入 Cloudflare → <code class="language-plaintext highlighter-rouge">DNS</code>，添加以下 4 条 A 记录，并开启代理（橙色云 ☁️）：</p> <table> <thead> <tr> <th>类型</th> <th>名称</th> <th>值</th> <th>代理状态</th> </tr> </thead> <tbody> <tr> <td>A</td> <td>@</td> <td>185.199.108.153</td> <td>☁️ Proxied</td> </tr> <tr> <td>A</td> <td>@</td> <td>185.199.109.153</td> <td>☁️ Proxied</td> </tr> <tr> <td>A</td> <td>@</td> <td>185.199.110.153</td> <td>☁️ Proxied</td> </tr> <tr> <td>A</td> <td>@</td> <td>185.199.111.153</td> <td>☁️ Proxied</td> </tr> </tbody> </table> <p>这些是 GitHub Pages 官方静态 IP 地址。务必开启橙色云，否则 Cloudflare 无法提供 HTTPS 代理功能。</p> <hr/> <h2 id="配置-cloudflare-ssl启用-https">配置 Cloudflare SSL（启用 HTTPS）</h2> <hr/> <h3 id="开启-universal-ssl自动证书">开启 Universal SSL（自动证书）</h3> <hr/> <p>路径：<code class="language-plaintext highlighter-rouge">SSL/TLS → Edge Certificates</code> 确认你看到有效证书（例如）：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>通用证书：xxxx.xx, *.xxxx.xx（由 Cloudflare 管理）
</code></pre></div></div> <hr/> <h3 id="设置正确的-ssl-模式">设置正确的 SSL 模式</h3> <hr/> <p>路径：<code class="language-plaintext highlighter-rouge">SSL/TLS → Overview</code> 选择：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>✅ Full
</code></pre></div></div> <p>千万不要使用 <code class="language-plaintext highlighter-rouge">Strict</code> 模式，它会导致 GitHub Pages 无法验证域名控制权，从而签发 HTTPS 失败。</p> <hr/> <h2 id="配置-github-仓库">配置 GitHub 仓库</h2> <hr/> <h3 id="添加-cname-文件必须">添加 CNAME 文件（必须）</h3> <hr/> <p>在仓库根目录添加 <code class="language-plaintext highlighter-rouge">CNAME</code> 文件（无扩展名），内容仅为你绑定的域名：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxxx.xx
</code></pre></div></div> <p>提交并推送至 GitHub。</p> <hr/> <h2 id="启用-github-pages-并绑定域名">启用 GitHub Pages 并绑定域名</h2> <hr/> <p>进入 GitHub 仓库 → <code class="language-plaintext highlighter-rouge">Settings → Pages</code>：</p> <ul> <li> <p>Custom domain 填入：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxxx.xx
</code></pre></div> </div> </li> <li> <p>等待几分钟，GitHub 将尝试自动签发 HTTPS 证书。</p> </li> <li> <p>成功后，启用选项：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>✅ Enforce HTTPS
</code></pre></div> </div> </li> </ul> <hr/> <h3 id="如-enforce-https-无法启用怎么办">如 Enforce HTTPS 无法启用，怎么办？</h3> <hr/> <p>如果看到：</p> <p><code class="language-plaintext highlighter-rouge">Enforce HTTPS — Unavailable for your site because your domain is not properly configured to support HTTPS</code></p> <p>说明 GitHub <strong>无法验证你的域名所有权</strong>，常见原因：<strong>Cloudflare 开启了代理，GitHub 无法验证域名</strong>。</p> <hr/> <h3 id="解决方法">解决方法</h3> <hr/> <ol> <li>暂时将 Cloudflare 中的 4 条 A 记录的代理状态改为「灰色云」（DNS only）</li> <li>等待 3~15 分钟，GitHub 成功签发证书后，<code class="language-plaintext highlighter-rouge">Enforce HTTPS</code> 将变为可用</li> <li>勾选启用后，将 Cloudflare 的 A 记录重新改回「橙色云 ☁️」</li> </ol> <hr/> <h2 id="附加推荐绑定-www-子域--裸域跳转">附加推荐：绑定 www 子域 + 裸域跳转</h2> <hr/> <h3 id="添加-www-子域">添加 www 子域</h3> <hr/> <p>Cloudflare → DNS 添加：</p> <table> <thead> <tr> <th>类型</th> <th>名称</th> <th>值</th> <th>代理状态</th> </tr> </thead> <tbody> <tr> <td>CNAME</td> <td>www</td> <td>yourname.github.io</td> <td>☁️ Proxied</td> </tr> </tbody> </table> <hr/> <h3 id="设置裸域自动跳转至-www">设置裸域自动跳转至 www</h3> <hr/> <p>Cloudflare → <code class="language-plaintext highlighter-rouge">Rules → Redirect Rules</code> 添加规则：</p> <ul> <li>If hostname = <code class="language-plaintext highlighter-rouge">xxxx.xx</code> → 301 重定向至 <code class="language-plaintext highlighter-rouge">https://www.xxxx.xx</code></li> </ul> <p>好处：</p> <ul> <li>避免裸域 SSL 验证问题</li> <li>用户访问裸域自动跳转，提升兼容性</li> </ul> <hr/> <h2 id="常见问题速查">常见问题速查</h2> <hr/> <table> <thead> <tr> <th>问题</th> <th>可能原因</th> <th>解决方式</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">Enforce HTTPS</code> 无法启用</td> <td>Cloudflare 开启代理阻止 GitHub 验证</td> <td>临时关闭代理（灰色云），等待签发后再开启</td> </tr> <tr> <td>报错 526 或 SSL 无效</td> <td>使用了 <code class="language-plaintext highlighter-rouge">Full (Strict)</code>，GitHub 证书尚未签发</td> <td>暂时改为 <code class="language-plaintext highlighter-rouge">Full</code> 模式，签发成功后再切回 <code class="language-plaintext highlighter-rouge">Strict</code></td> </tr> <tr> <td>访问裸域无效</td> <td>没配置 A 记录或未开启代理</td> <td>添加 4 条 A 记录并开启 ☁️ 代理</td> </tr> <tr> <td>证书看起来不是 GitHub 的</td> <td>实际是 Cloudflare 的边缘证书</td> <td>正常现象，Cloudflare 使用自己的证书在边缘节点处理</td> </tr> </tbody> </table> <hr/> <h2 id="总结配置顺序">总结配置顺序</h2> <hr/> <ol> <li>添加 4 条裸域 A 记录（185.199.x.x），开启代理 ☁️</li> <li>添加仓库根目录 <code class="language-plaintext highlighter-rouge">CNAME</code> 文件，填入域名</li> <li>在 GitHub Pages 设置中绑定域名，等待 HTTPS 自动签发</li> <li>若 <code class="language-plaintext highlighter-rouge">Enforce HTTPS</code> 无法启用：临时关闭 Cloudflare 代理（灰色云），等待生效</li> <li>成功后启用 <code class="language-plaintext highlighter-rouge">Enforce HTTPS</code>，再改回橙色云 ☁️</li> <li>（推荐）添加 <code class="language-plaintext highlighter-rouge">www</code> 子域并设置裸域跳转</li> </ol>]]></content><author><name></name></author><category term="Internet"/><category term="gh-pages"/><category term="cloudflare"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">使用 ImageMagick 批量转换 JPG 为 WebP 格式，提升网页性能</title><link href="https://36525.day/blog/2025-06-20/imagemagick-convert-jpg-to-webp/" rel="alternate" type="text/html" title="使用 ImageMagick 批量转换 JPG 为 WebP 格式，提升网页性能"/><published>2025-06-20T00:00:00-07:00</published><updated>2025-06-20T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-20/imagemagick-convert-jpg-to-webp</id><content type="html" xml:base="https://36525.day/blog/2025-06-20/imagemagick-convert-jpg-to-webp/"><![CDATA[<p><img src="/assets/img/blog/imagemagick-convert-jpg-to-webp.webp" style="width:100%;" alt="imagemagick-convert-jpg-to-webp"/></p> <p>在现代网页优化中，图片格式的选择和压缩率直接影响页面加载速度和用户体验。WebP 作为一种现代图片格式，兼具优秀的压缩率和较好的兼容性，已被广泛应用于网站图片优化。本文介绍如何使用开源工具 ImageMagick 实现本地批量将 JPG 图片转换为 WebP 格式，简洁高效，适合开发者和设计师。</p> <hr/> <h2 id="为什么选择-webp">为什么选择 WebP？</h2> <hr/> <p>WebP 是由 Google 推出的图片格式，支持有损和无损压缩，文件大小相比传统 JPEG 和 PNG 格式大幅减小，能有效提升网站加载速度，降低带宽使用。</p> <ul> <li><strong>有损压缩</strong>：适合照片类图片，文件更小，质量可调</li> <li><strong>无损压缩</strong>：适合图标、透明背景图片，保证图像质量</li> </ul> <p>兼容主流浏览器（Chrome、Firefox、Edge、Safari 14+），是目前网页图片优化的首选格式。</p> <hr/> <h2 id="imagemagick-简介">ImageMagick 简介</h2> <hr/> <p>ImageMagick 是强大的开源图像处理工具，支持超过 200 种图片格式转换。通过命令行，开发者可以快速批量处理图片，执行格式转换、尺寸调整、水印添加等多种操作。</p> <hr/> <h2 id="环境准备">环境准备</h2> <hr/> <ul> <li> <p><strong>macOS 用户</strong>：推荐通过 Homebrew 安装</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>imagemagick
</code></pre></div> </div> </li> <li> <p><strong>Linux 用户</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>imagemagick
</code></pre></div> </div> </li> </ul> <hr/> <h2 id="批量转换脚本示例">批量转换脚本示例</h2> <hr/> <p>假设你的 JPG 图片都存放在 <code class="language-plaintext highlighter-rouge">~/Desktop/media</code> 文件夹，执行以下 Bash 脚本即可将所有 JPG 转换为 WebP，转换结果放在 <code class="language-plaintext highlighter-rouge">webp_output</code> 子目录：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">INPUT_DIR</span><span class="o">=</span>~/Desktop/media
<span class="nv">OUTPUT_DIR</span><span class="o">=</span>~/Desktop/media/webp_output

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$OUTPUT_DIR</span><span class="s2">"</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$INPUT_DIR</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit

</span><span class="k">for </span>img <span class="k">in</span> <span class="k">*</span>.jpg <span class="k">*</span>.jpeg<span class="p">;</span> <span class="k">do
  </span>magick convert <span class="s2">"</span><span class="nv">$img</span><span class="s2">"</span> <span class="nt">-quality</span> 80 <span class="s2">"</span><span class="nv">$OUTPUT_DIR</span><span class="s2">/</span><span class="k">${</span><span class="nv">img</span><span class="p">%.jpg</span><span class="k">}</span><span class="s2">.webp"</span>
  <span class="nb">echo</span> <span class="s2">"Converted </span><span class="nv">$img</span><span class="s2"> to WebP."</span>
<span class="k">done

</span><span class="nb">echo</span> <span class="s2">"All images converted and saved in </span><span class="nv">$OUTPUT_DIR</span><span class="s2">"</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">-quality 80</code> 参数控制压缩质量，范围 0-100，80 是常用的高质量设置</li> <li>输出目录分离，避免覆盖源文件</li> </ul> <hr/> <h2 id="运行步骤">运行步骤</h2> <hr/> <ol> <li> <p>将上述脚本保存为 <code class="language-plaintext highlighter-rouge">convert_webp.sh</code>，赋予执行权限：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x convert_webp.sh
</code></pre></div> </div> </li> <li> <p>执行脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./convert_webp.sh
</code></pre></div> </div> </li> <li> <p>等待完成后，检查 <code class="language-plaintext highlighter-rouge">webp_output</code> 文件夹，查看转换结果</p> </li> </ol> <ul> <li><code class="language-plaintext highlighter-rouge">WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"</code>，这是 ImageMagick 7 版本的新变化提醒，建议以后用 magick convert 或直接用 magick 命令代替 convert，但你脚本里用 magick convert 就是正确的。</li> </ul> <hr/> <h2 id="总结">总结</h2> <hr/> <p>通过 ImageMagick 批量转换图片格式，开发者可以方便快捷地将 JPG 图片转换为更高效的 WebP 格式，从而提升网页加载性能和用户体验。结合自动化脚本，批量处理大批量图片变得轻松简单。</p>]]></content><author><name></name></author><category term="Internet"/><category term="image-magick"/><category term="webp"/><category term="bash"/><summary type="html"><![CDATA[介绍如何使用 ImageMagick 在本地批量将 JPG 图片转换为 WebP 格式，有效减小图片体积、提升网页加载速度，并提供适用于 macOS、Linux 的完整脚本与操作指南。]]></summary></entry><entry><title type="html">用 Python 脚本自动同步 Markdown 文章 Front Matter 的图片链接</title><link href="https://36525.day/blog/2025-06-20/python-update-frontmatter-link/" rel="alternate" type="text/html" title="用 Python 脚本自动同步 Markdown 文章 Front Matter 的图片链接"/><published>2025-06-20T00:00:00-07:00</published><updated>2025-06-20T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-20/python-update-frontmatter-link</id><content type="html" xml:base="https://36525.day/blog/2025-06-20/python-update-frontmatter-link/"><![CDATA[<p><img src="/assets/img/blog/python-update-frontmatter-link.webp" style="width:100%;" alt="python-update-frontmatter-link"/></p> <h2 id="背景">背景</h2> <hr/> <p>在修改 Markdown 文章时，通常需要为每篇文章设置 <code class="language-plaintext highlighter-rouge">og_image</code>（社交分享图）和 <code class="language-plaintext highlighter-rouge">thumbnail</code>（缩略图）。手动维护这两个字段往往费时且易错，尤其当图片文件名与文章文件名严格对应时，自动化脚本就能派上用场。通过简单的 Python 脚本，批量更新博客文章 Front Matter 中的 <code class="language-plaintext highlighter-rouge">og_image</code> 和 <code class="language-plaintext highlighter-rouge">thumbnail</code> 字段，使其和本地图片文件名保持一致，极大提升内容维护效率。</p> <hr/> <h2 id="需求分析">需求分析</h2> <hr/> <ul> <li>博客文章位于 <code class="language-plaintext highlighter-rouge">_posts</code> 文件夹，文件名格式形如： <code class="language-plaintext highlighter-rouge">2025-06-20-my-post.md</code></li> <li>对应图片存放在 <code class="language-plaintext highlighter-rouge">assets/img/blog/</code>，图片文件名形如： <code class="language-plaintext highlighter-rouge">my-post.webp</code></li> <li>希望自动将每篇文章 Front Matter 中的 <code class="language-plaintext highlighter-rouge">og_image</code> 和 <code class="language-plaintext highlighter-rouge">thumbnail</code> 指向对应图片的路径： <code class="language-plaintext highlighter-rouge">/assets/img/blog/my-post.webp</code></li> <li>如果字段不存在，自动插入 <code class="language-plaintext highlighter-rouge">og_image</code> 在前、<code class="language-plaintext highlighter-rouge">thumbnail</code> 在后</li> <li>不修改正文内容，仅处理 Front Matter</li> <li>保持原有的图片路径前缀，替换文件名部分</li> </ul> <hr/> <h2 id="解决方案">解决方案</h2> <hr/> <p>利用 Python 脚本遍历所有文章，匹配对应图片文件，更新 Front Matter 中相关字段。核心步骤：</p> <ol> <li><strong>文件匹配规则</strong> 去除文章文件名前的日期前缀（如 <code class="language-plaintext highlighter-rouge">2025-06-20-</code>），得到 slug</li> <li><strong>路径构造</strong> 拼接图片目录路径，检查图片文件是否存在</li> <li><strong>Front Matter 读取与修改</strong> 定位 YAML 头部区域，查找 <code class="language-plaintext highlighter-rouge">og_image</code> 和 <code class="language-plaintext highlighter-rouge">thumbnail</code> 字段</li> <li><strong>字段更新或插入</strong> 替换或新增字段，保证字段顺序和内容正确</li> <li><strong>写回文件</strong></li> </ol> <hr/> <h2 id="最终脚本展示-update_thumbnailpy">最终脚本展示 <code class="language-plaintext highlighter-rouge">update_thumbnail.py</code></h2> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>

<span class="c1"># === 设置目录 ===
</span><span class="n">posts_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./_posts</span><span class="sh">'</span>
<span class="n">img_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./assets/img/blog</span><span class="sh">'</span>

<span class="c1"># 获取 Markdown 文件列表（按字母排序）
</span><span class="n">post_files</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.md</span><span class="sh">'</span><span class="p">)])</span>


<span class="k">for</span> <span class="n">post_file</span> <span class="ow">in</span> <span class="n">post_files</span><span class="p">:</span>
    <span class="n">post_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">splitext</span><span class="p">(</span><span class="n">post_file</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># 🟡 去除日期前缀，只保留 slug 作为图片名匹配
</span>    <span class="n">slug</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^\d{4}-\d{2}-\d{2}-</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="n">post_name</span><span class="p">)</span>
    <span class="n">expected_img</span> <span class="o">=</span> <span class="n">slug</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.webp</span><span class="sh">"</span>
    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_dir</span><span class="p">,</span> <span class="n">expected_img</span><span class="p">)</span>

    <span class="c1"># 如果图片不存在，跳过
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">img_path</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">⚠️ 缺少图片：</span><span class="si">{</span><span class="n">expected_img</span><span class="si">}</span><span class="s">，跳过 </span><span class="si">{</span><span class="n">post_file</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">continue</span>

    <span class="n">img_name</span> <span class="o">=</span> <span class="n">expected_img</span>
    <span class="n">img_web_path</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">/assets/img/blog/</span><span class="si">{</span><span class="n">img_name</span><span class="si">}</span><span class="sh">"</span>

    <span class="c1"># === 读取文章内容 ===
</span>    <span class="n">post_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">,</span> <span class="n">post_file</span><span class="p">)</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">post_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>

    <span class="c1"># === 定位 Front Matter（YAML）范围 ===
</span>    <span class="n">in_front_matter</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">front_matter_end_idx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="o">==</span> <span class="sh">'</span><span class="s">---</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">in_front_matter</span><span class="p">:</span>
                <span class="n">in_front_matter</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">front_matter_end_idx</span> <span class="o">=</span> <span class="n">idx</span>
                <span class="k">break</span>

    <span class="n">fm_lines</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">front_matter_end_idx</span><span class="p">]</span>
    <span class="n">new_fm_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">og_image_found</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">thumbnail_found</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fm_lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^(thumbnail:|og_image:)\s*(.+)$</span><span class="sh">'</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">field_name</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">old_path</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">prefix_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(.*/)</span><span class="sh">'</span><span class="p">,</span> <span class="n">old_path</span><span class="p">)</span>
            <span class="n">prefix</span> <span class="o">=</span> <span class="n">prefix_match</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">prefix_match</span> <span class="k">else</span> <span class="sh">"</span><span class="s">/assets/img/blog/</span><span class="sh">"</span>
            <span class="n">new_path</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="n">img_name</span>
            <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">field_name</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">new_path</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">field_name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">og_image:</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">og_image_found</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">elif</span> <span class="n">field_name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">thumbnail:</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">thumbnail_found</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>

    <span class="c1"># === 插入字段（如果不存在） ===
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">og_image_found</span><span class="p">:</span>
        <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">og_image: </span><span class="si">{</span><span class="n">img_web_path</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">thumbnail_found</span><span class="p">:</span>
        <span class="n">new_fm_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">thumbnail: </span><span class="si">{</span><span class="n">img_web_path</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># === 写回文件：更新后的 Front Matter + 原正文 ===
</span>    <span class="n">new_lines</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">---</span><span class="se">\n</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">new_fm_lines</span> <span class="o">+</span> <span class="p">[</span><span class="sh">'</span><span class="s">---</span><span class="se">\n</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">front_matter_end_idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">post_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">writelines</span><span class="p">(</span><span class="n">new_lines</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">✅ 已更新 Front Matter：</span><span class="si">{</span><span class="n">post_file</span><span class="si">}</span><span class="s"> → 图片 </span><span class="si">{</span><span class="n">img_name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h2 id="使用说明">使用说明</h2> <hr/> <ul> <li> <p>将脚本保存为 <code class="language-plaintext highlighter-rouge">update_thumbnail.py</code> 放在文件夹根目录（比如<code class="language-plaintext highlighter-rouge">xx</code>）</p> </li> <li> <p>确保目录结构如下：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xx/
├── update_thumbnail.py
├── _posts/
│   ├── 2025-06-20-my-post.md
│   └── ...
└── assets/
    └── img/
        └── blog/
            ├── my-post.webp
            └── ...
</code></pre></div> </div> </li> <li> <p>运行脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Desktop/xx
python3 update_thumbnail.py
</code></pre></div> </div> </li> </ul> <hr/> <h2 id="处理示例">处理示例</h2> <hr/> <p>假设原始 Front Matter 是：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: 示例
date: 2025-06-20
---
</code></pre></div></div> <p>运行后则自动变为：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: 示例
date: 2025-06-20
og_image: /assets/img/blog/my-post.webp
thumbnail: /assets/img/blog/my-post.webp
---
</code></pre></div></div>]]></content><author><name></name></author><category term="Internet"/><category term="python"/><category term="frontmatter"/><summary type="html"><![CDATA[通过 Python 脚本批量更新 博客 Front Matter 中的图片字段，实现文章与图片文件名自动匹配，提升维护效率。]]></summary></entry><entry><title type="html">Markdown 批量更新 Front Matter 日期并重命名文件的实用脚本教程</title><link href="https://36525.day/blog/2025-06-19/markdown-frontmatter-auto-date/" rel="alternate" type="text/html" title="Markdown 批量更新 Front Matter 日期并重命名文件的实用脚本教程"/><published>2025-06-19T00:00:00-07:00</published><updated>2025-06-19T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-19/markdown-frontmatter-auto-date</id><content type="html" xml:base="https://36525.day/blog/2025-06-19/markdown-frontmatter-auto-date/"><![CDATA[<p><img src="/assets/img/blog/markdown-frontmatter-auto-date.webp" style="width:100%;" alt="markdown-frontmatter-auto-date"/></p> <p>在构建基于 Jekyll 或 Hugo 的博客时，标准化的 Front Matter 格式（尤其是 <code class="language-plaintext highlighter-rouge">date:</code> 字段）至关重要。本文介绍一个两步自动化方案：使用 Python 提取正文日期并插入到 YAML Front Matter 中，然后使用 Shell 脚本按 <code class="language-plaintext highlighter-rouge">date:</code> 重命名所有 Markdown 文件。</p> <hr/> <h2 id="目标">目标</h2> <hr/> <ul> <li>自动从 Markdown 正文中提取 <code class="language-plaintext highlighter-rouge">YYYY/MM/DD</code>，<code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code>格式的日期</li> <li>将其转为标准格式 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code></li> <li>添加或更新 <code class="language-plaintext highlighter-rouge">date:</code> 字段到 Front Matter 中</li> <li>根据 <code class="language-plaintext highlighter-rouge">date:</code> 字段重命名文件为 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-filename.md</code></li> </ul> <hr/> <h2 id="使用-python-脚本自动更新-date-字段">使用 Python 脚本自动更新 <code class="language-plaintext highlighter-rouge">date:</code> 字段</h2> <hr/> <h3 id="脚本说明">脚本说明</h3> <hr/> <ul> <li>搜索正文中的第一个日期（格式如 <code class="language-plaintext highlighter-rouge">2024/5/9</code>，<code class="language-plaintext highlighter-rouge">2024-5-9</code>）</li> <li>格式化为 <code class="language-plaintext highlighter-rouge">2024-05-09</code></li> <li>写入（或更新）YAML Front Matter 中的 <code class="language-plaintext highlighter-rouge">date:</code> 字段</li> </ul> <hr/> <h3 id="脚本代码保存为-update_datepy">脚本代码（保存为 <code class="language-plaintext highlighter-rouge">update_date.py</code>）</h3> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

<span class="c1"># 找正文第一次出现 YYYY/MM/DD 格式的日期，没有跳过
</span><span class="n">date_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\d{4})/(\d{1,2})/(\d{1,2})</span><span class="sh">'</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">date_match</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">No date found in </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">, skipped</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">yyyy</span><span class="p">,</span> <span class="n">mm</span><span class="p">,</span> <span class="n">dd</span> <span class="o">=</span> <span class="n">date_match</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>
<span class="n">date_str</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">yyyy</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="nf">int</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="nf">int</span><span class="p">(</span><span class="n">dd</span><span class="p">)</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 判断是否有 Front Matter，分割
</span><span class="k">if</span> <span class="n">content</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">'</span><span class="s">---</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="n">content</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">---</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">fm</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

    <span class="c1"># 替换或新增 date: 字段
</span>    <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^date:\s*.*$</span><span class="sh">'</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">MULTILINE</span><span class="p">):</span>
        <span class="n">fm_new</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^date:\s*.*$</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">MULTILINE</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">fm_new</span> <span class="o">=</span> <span class="n">fm</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span>

    <span class="n">new_content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">---</span><span class="si">{</span><span class="n">fm_new</span><span class="si">}</span><span class="s">---</span><span class="si">{</span><span class="n">body</span><span class="si">}</span><span class="sh">"</span>

<span class="k">else</span><span class="p">:</span>
    <span class="c1"># 没有 Front Matter，新增一个
</span>    <span class="n">new_content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">---</span><span class="se">\n</span><span class="s">date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="se">\n</span><span class="s">---</span><span class="se">\n</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="sh">"</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">new_content</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Updated </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s"> with date: </span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h2 id="shell-脚本按-date-字段批量重命名文件">Shell 脚本按 <code class="language-plaintext highlighter-rouge">date:</code> 字段批量重命名文件</h2> <hr/> <h3 id="脚本代码可保存为-rename_by_datesh">脚本代码（可保存为 <code class="language-plaintext highlighter-rouge">rename_by_date.sh</code>）</h3> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.md<span class="p">;</span> <span class="k">do
  </span><span class="nv">date_prefix</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-m1</span> <span class="s1">'^date:'</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/date:[[:space:]]*([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/'</span><span class="si">)</span>
  <span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$date_prefix</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">new_name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">date_prefix</span><span class="k">}</span><span class="s2">-</span><span class="nv">$file</span><span class="s2">"</span>
    <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$new_name</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"Renamed </span><span class="nv">$file</span><span class="s2"> → </span><span class="nv">$new_name</span><span class="s2">"</span>
  <span class="k">fi
done</span>
</code></pre></div></div> <hr/> <h3 id="整段逻辑说明">整段逻辑说明</h3> <hr/> <table> <thead> <tr> <th>代码片段</th> <th>作用说明</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">for file in *.md; do ... done</code></td> <td>遍历当前目录下所有 Markdown 文件（<code class="language-plaintext highlighter-rouge">.md</code> 结尾）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">date_prefix=$(grep -m1 '^date:' "$file" \| sed -E '...')</code></td> <td>从文件中提取 <code class="language-plaintext highlighter-rouge">date: YYYY-MM-DD</code> 的值（例如 <code class="language-plaintext highlighter-rouge">2024-06-20</code>），并赋值给变量 <code class="language-plaintext highlighter-rouge">date_prefix</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">grep -m1 '^date:'</code></td> <td>查找开头为 <code class="language-plaintext highlighter-rouge">date:</code> 的第一行（避免多次匹配）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">sed -E 's/date:[[:space:]]*([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/'</code></td> <td>使用正则从 <code class="language-plaintext highlighter-rouge">date:</code> 这一行中提取 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> 日期</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">[[ -n "$date_prefix" ]]</code></td> <td>判断是否成功提取日期（非空）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">new_name="${date_prefix}-$file"</code></td> <td>构造新文件名：在原文件名前加上日期前缀，如 <code class="language-plaintext highlighter-rouge">2025-06-20-xxx.md</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">mv "$file" "$new_name"</code></td> <td>使用 <code class="language-plaintext highlighter-rouge">mv</code> 命令将原文件重命名</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">echo "Renamed $file → $new_name"</code></td> <td>输出重命名日志，提示用户本次处理的文件名变更</td> </tr> </tbody> </table> <hr/> <h3 id="效果示例">效果示例</h3> <hr/> <table> <thead> <tr> <th>原始文件名</th> <th>文件内容中的日期字段</th> <th>执行后文件名</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">article.md</code></td> <td><code class="language-plaintext highlighter-rouge">date: 2024/06/20</code></td> <td><code class="language-plaintext highlighter-rouge">2024-06-20-article.md</code></td> </tr> </tbody> </table> <hr/> <h2 id="使用方法终端中执行">使用方法（终端中执行）</h2> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Desktop/drafts  <span class="c"># 切换到你的 Markdown 文件夹</span>
<span class="c"># 逐个文件调用 Python 脚本</span>
<span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.md<span class="p">;</span> <span class="k">do </span>python3 ../update_date.py <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span>
<span class="c"># 然后执行重命名脚本</span>
bash rename_by_date.sh
</code></pre></div></div>]]></content><author><name></name></author><category term="Internet"/><category term="markdown"/><category term="frontmatter"/><category term="python"/><category term="bash"/><summary type="html"><![CDATA[利用 Python 与 Shell 脚本，从正文提取日期并自动写入或更新 YAML Front Matter 中的 date 字段，并批量按日期重命名文件名，适用于静态博客内容管理。]]></summary></entry><entry><title type="html">macOS 本地从零开始配置 Prettier + VS Code</title><link href="https://36525.day/blog/2025-06-18/prettier-nodejs-vscode/" rel="alternate" type="text/html" title="macOS 本地从零开始配置 Prettier + VS Code"/><published>2025-06-18T00:00:00-07:00</published><updated>2025-06-18T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-18/prettier-nodejs-vscode</id><content type="html" xml:base="https://36525.day/blog/2025-06-18/prettier-nodejs-vscode/"><![CDATA[<p><img src="/assets/img/blog/prettier-nodejs-vscode.webp" style="width:100%;" alt="prettier-nodejs-vscode"/></p> <p>本指南适用于希望<strong>批量格式化 Markdown、YAML、HTML、JS、CSS 等文件</strong>的用户，尤其适合使用 VS Code 的用户。</p> <hr/> <h2 id="安装-nodejs推荐使用-homebrew">安装 Node.js（推荐使用 Homebrew）</h2> <hr/> <p>Prettier 依赖 Node.js 环境，建议通过 Homebrew 安装，便于更新与管理。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>node
</code></pre></div></div> <p>安装完成后，在终端运行验证命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node <span class="nt">-v</span>
npm <span class="nt">-v</span>
</code></pre></div></div> <p>示例输出：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>v22.16.0
10.9.2
</code></pre></div></div> <hr/> <h3 id="常见问题">常见问题</h3> <hr/> <p>如遇 <code class="language-plaintext highlighter-rouge">zsh: command not found: node</code>，请确认路径是否加入环境变量：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/opt/homebrew/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">source</span> ~/.zprofile
</code></pre></div></div> <hr/> <h2 id="在项目中安装-prettier">在项目中安装 Prettier</h2> <hr/> <p>进入你的项目目录（如 <code class="language-plaintext highlighter-rouge">xxxx.github.io</code>）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/xx/xxxx.github.io
</code></pre></div></div> <p>安装 Prettier 到项目开发依赖中：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> prettier
</code></pre></div></div> <p>安装成功后，目录中会出现：</p> <ul> <li><code class="language-plaintext highlighter-rouge">node_modules/</code></li> <li><code class="language-plaintext highlighter-rouge">package-lock.json</code></li> <li><code class="language-plaintext highlighter-rouge">package.json</code>（如原本不存在会自动生成）</li> </ul> <hr/> <h2 id="安装-vs-code-插件prettier">安装 VS Code 插件：Prettier</h2> <hr/> <ol> <li>打开 VS Code</li> <li>前往扩展商店，搜索并安装：</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prettier - Code formatter
</code></pre></div></div> <blockquote> <p>插件作者为：<code class="language-plaintext highlighter-rouge">esbenp.prettier-vscode</code></p> </blockquote> <hr/> <h2 id="配置-vs-code-自动格式化">配置 VS Code 自动格式化</h2> <hr/> <p>打开 <code class="language-plaintext highlighter-rouge">settings.json</code>（打开命令面板：<code class="language-plaintext highlighter-rouge">Cmd + Shift + P</code>，命令面板中搜索 <code class="language-plaintext highlighter-rouge">Preferences: Open Settings (JSON)</code>），添加以下内容：</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>自动保存。如你只希望对特定语言启用（如 Markdown）：</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"[markdown]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h2 id="配置-prettier-行为可选">配置 Prettier 行为（可选）</h2> <hr/> <h3 id="创建-prettierrc-文件">创建 <code class="language-plaintext highlighter-rouge">.prettierrc</code> 文件</h3> <hr/> <p>在项目根目录创建 <code class="language-plaintext highlighter-rouge">.prettierrc</code> 文件，自定义格式规则。例如：</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"tabWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"useTabs"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"semi"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"singleQuote"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"trailingComma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
  </span><span class="nl">"proseWrap"</span><span class="p">:</span><span class="w"> </span><span class="s2">"preserve"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="创建-prettierignore-文件">创建 <code class="language-plaintext highlighter-rouge">.prettierignore</code> 文件</h3> <hr/> <p>可用于排除不希望格式化的路径，例如：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node_modules
_site
_assets
docs/vendor
*.min.js
</code></pre></div></div> <hr/> <h2 id="批量格式化项目文件">批量格式化项目文件</h2> <hr/> <p>在项目根目录运行以下命令格式化所有支持的文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="nb">.</span> <span class="nt">--write</span>
</code></pre></div></div> <p>可选用法（推荐）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="s2">"**/*.{md,yml,yaml,html,json,css,js}"</span> <span class="nt">--write</span>
</code></pre></div></div> <p>仅检查格式（不会修改文件）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx prettier <span class="nb">.</span> <span class="nt">--check</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Internet"/><category term="vscode"/><category term="prettier"/><summary type="html"><![CDATA[本文详细介绍如何在 macOS 本地通过 Homebrew 安装 Node.js，并结合 Prettier 与 VS Code，实现对 Markdown、YAML、HTML、JS 等常见格式的自动与批量格式化。]]></summary></entry><entry><title type="html">危机生存法则 / Crisis Survival Rules</title><link href="https://36525.day/blog/2025-06-17/crisis-survival-rules/" rel="alternate" type="text/html" title="危机生存法则 / Crisis Survival Rules"/><published>2025-06-17T00:00:00-07:00</published><updated>2025-06-17T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-17/crisis-survival-rules</id><content type="html" xml:base="https://36525.day/blog/2025-06-17/crisis-survival-rules/"><![CDATA[<p><img src="/assets/img/blog/" style="width:100%;" alt=""/></p> <hr/> <h2 id="当世界沉默时自救是唯一的出路">当世界沉默时，自救是唯一的出路</h2> <hr/> <p>生命被挟持，求援无声，体制沉默。<br/> 指责外界？不过是<code class="language-plaintext highlighter-rouge">风中微弱的叹息</code>，<code class="language-plaintext highlighter-rouge">徒劳且危险</code>。<br/> 此刻，你须自主求生。这不是选择，而是唯一的出路。</p> <p>在刀锋与暗影下，你必须保持冷静。让呼吸深而缓，让心跳回归平静。<br/> <code class="language-plaintext highlighter-rouge">情绪是燃烧的野火</code>，会模糊视线，削弱判断。<code class="language-plaintext highlighter-rouge">言语，当如水般流淌</code>：<code class="language-plaintext highlighter-rouge">顺从，而不卑微</code>；不激怒，只求生存。<br/> 每一次缓慢的挪动，每一次看似无意的眼神，都可能是为自己争取时间的筹码，为脱困创造转瞬即逝的契机。</p> <p>面对无为的系统，<code class="language-plaintext highlighter-rouge">不必将愤怒化作徒劳的悲吼</code>。那只会引来更深的沉默，甚至反噬。<br/> 你需<code class="language-plaintext highlighter-rouge">智慧施压，如水滴石穿，无声却有力</code>。<br/> 每一次拨出的电话，每一次发送的信息，每一次记录的细节，都留下痕迹。 它们不是为了当即的救援，而是为了日后的追责，为了揭开那层掩盖事实的薄雾。</p> <p>社会冷漠如海，旁观者众多，却无人伸出援手。 这是<code class="language-plaintext highlighter-rouge">残酷的现实，但绝非无望的终点</code>。<br/> 海面上仍有缝隙，你需要抓住那<code class="language-plaintext highlighter-rouge">微弱连接</code>——也许是某个擦肩而过的眼神，也许是社交媒体上一点微弱的回响。<br/> 不要寄希望于奇迹，但也<code class="language-plaintext highlighter-rouge">不要放弃任何一丝可能</code>。</p> <p>最重要的是，维护<code class="language-plaintext highlighter-rouge">内心韧性</code>，那是你在<code class="language-plaintext highlighter-rouge">无边黑暗中唯一的灯塔</code>。<br/> 恐惧和绝望会试图吞噬你，让你失去行动的能力。 但你要反复提醒自己，你拥有<code class="language-plaintext highlighter-rouge">自主力量</code>，你能够应对。<br/> 即便身体被束缚，思想也必须自由。 那是<code class="language-plaintext highlighter-rouge">抵抗一切的最后堡垒</code>。</p> <p>在绝境中，<code class="language-plaintext highlighter-rouge">理性与坚韧</code>才是你<code class="language-plaintext highlighter-rouge">手中最锋利的剑刃</code>，为你<code class="language-plaintext highlighter-rouge">劈开一条通向生存与正义的幽径</code>。<br/> 这条路或许漫长，或许布满荆棘，但只要那微弱的火光尚存，你便有了前行的方向。</p> <hr/> <h2 id="when-the-world-falls-silent-self-rescue-becomes-the-only-way-out">When the World Falls Silent, Self-Rescue Becomes the Only Way Out</h2> <hr/> <p>When life is taken hostage, cries for help go unheard, and the system remains mute.<br/> Blaming the outside world? It’s but <code class="language-plaintext highlighter-rouge">a faint sigh in the wind</code>, <code class="language-plaintext highlighter-rouge">futile and dangerous</code>.<br/> In this moment, you must survive on your own. This is not a choice; it is the only way.</p> <p>Amid blades and shadows, you must stay calm. Breathe slow and deep. Steady your heartbeat.<br/> <code class="language-plaintext highlighter-rouge">Emotion is a wildfire</code>, it clouds vision and weakens judgment. Your <code class="language-plaintext highlighter-rouge">words must flow like water</code>: <code class="language-plaintext highlighter-rouge">compliant, but never submissive</code>; unprovoking, but always alert.<br/> Every slow movement, every seemingly casual glance, may buy you precious seconds, creating fleeting chances to escape.</p> <p>In the face of an inert system, <code class="language-plaintext highlighter-rouge">don't waste rage on fruitless screams</code>.<br/> They will only bring deeper silence—or retaliation. <code class="language-plaintext highlighter-rouge">Apply pressure with wisdom, like water wearing away stone, silent but unrelenting.</code><br/> Each call you make, each message you send, each detail you record, leave a trail. Not for immediate rescue, but for future accountability, to lift the veil that hides the truth.</p> <p>Society is an ocean of apathy. Bystanders are many, but few will extend a hand. This is <code class="language-plaintext highlighter-rouge">the brutal truth, but not the end of hope</code>.<br/> There are still cracks on the surface, uyou must seize those <code class="language-plaintext highlighter-rouge">fragile threads</code>, perhaps a passing glance, perhaps a faint echo on social media.<br/> Do not rely on miracles, but <code class="language-plaintext highlighter-rouge">never give up on any sliver of possibility</code>.</p> <p>Most of all, protect your <code class="language-plaintext highlighter-rouge">inner resilience</code>, it is your <code class="language-plaintext highlighter-rouge">only lighthouse in the vast darkness</code>.<br/> Fear and despair will try to paralyze you, to strip away your will. But remind yourself again and again, you <code class="language-plaintext highlighter-rouge">hold agency</code>, you can respond.<br/> Even if your body is restrained, your mind must remain free. That is <code class="language-plaintext highlighter-rouge">the last bastion against everything</code>.</p> <p>In the depths of desperation, <code class="language-plaintext highlighter-rouge">reason and tenacity</code> are your <code class="language-plaintext highlighter-rouge">sharpest blades in hands</code>, <code class="language-plaintext highlighter-rouge">cutting a hidden path toward survival and justice</code>.<br/> The road may be long and thorny, but as long as even a faint spark remains, you have a direction to follow.</p> <hr/>]]></content><author><name></name></author><category term="Notes"/><category term="crisis"/><category term="survival"/><summary type="html"><![CDATA[在生命威胁、求助无门或体制失灵的危机中，理性与坚韧才是手中最锋利的剑刃，劈开一条通向生存与正义的幽径。In times of crisis, when life is threatened, help is unavailable, or systems fail, reason and tenacity are the sharpest blades in hands, cutting a hidden path toward survival and justice.]]></summary></entry><entry><title type="html">Jekyll 依赖管理：正确修改 Gemfile 并避免构建错误</title><link href="https://36525.day/blog/2025-06-17/jekyll-update-gemfile-guide/" rel="alternate" type="text/html" title="Jekyll 依赖管理：正确修改 Gemfile 并避免构建错误"/><published>2025-06-17T00:00:00-07:00</published><updated>2025-06-17T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-17/jekyll-update-gemfile-guide</id><content type="html" xml:base="https://36525.day/blog/2025-06-17/jekyll-update-gemfile-guide/"><![CDATA[<p><img src="/assets/img/blog/jekyll-update-gemfile-guide.webp" style="width:100%;" alt="jekyll-update-gemfile-guide"/></p> <p>当你在维护 Jekyll 项目时，<strong>修改 Gemfile 后却忘记更新 Gemfile.lock</strong>，很容易导致构建失败（特别是在 GitHub Actions、Cloudflare Pages 等 CI/CD 环境）。本文总结了常见问题、正确做法和命令技巧，帮你避免踩坑。</p> <hr/> <h2 id="基础概念">基础概念</h2> <hr/> <table> <thead> <tr> <th>文件名</th> <th>作用说明</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">Gemfile</code></td> <td>声明你项目需要哪些 Ruby gems（插件）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Gemfile.lock</code></td> <td>锁定 gem 的具体版本，确保不同环境下依赖一致</td> </tr> <tr> <td>Bundler</td> <td>管理上述两个文件、安装和更新依赖的工具</td> </tr> </tbody> </table> <hr/> <h2 id="常见问题及错误信息">常见问题及错误信息</h2> <hr/> <p><strong>场景</strong>：你删除了某个插件（如 <code class="language-plaintext highlighter-rouge">jekyll-jupyter-notebook</code>）后，仅更新了 <code class="language-plaintext highlighter-rouge">Gemfile</code>，没改 <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>，结果在 CI 构建时报错：</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Some dependencies were deleted from your gemfile, but the lockfile can't be updated because frozen mode is set
</code></pre></div></div> <p><strong>原因</strong>：CI 环境默认开启 <code class="language-plaintext highlighter-rouge">frozen</code> 模式，禁止自动更新 <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>，以避免依赖变更带来的不确定性。</p> <hr/> <h2 id="正确修改依赖的流程">正确修改依赖的流程</h2> <hr/> <ol> <li> <p><strong>修改 Gemfile</strong></p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 删除或注释掉不需要的插件</span>
<span class="c1"># gem "jekyll-jupyter-notebook"</span>
</code></pre></div> </div> </li> <li> <p><strong>允许更新锁文件</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle config <span class="nb">set </span>frozen <span class="nb">false</span>
</code></pre></div> </div> </li> <li> <p><strong>更新依赖并重生成 Gemfile.lock</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div> </div> </li> <li> <p><strong>提交改动</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add Gemfile Gemfile.lock
git commit <span class="nt">-m</span> <span class="s2">"Update dependencies"</span>
git push
</code></pre></div> </div> </li> </ol> <hr/> <h2 id="cicd-构建注意事项">CI/CD 构建注意事项</h2> <hr/> <table> <thead> <tr> <th>建议做法</th> <th>原因</th> </tr> </thead> <tbody> <tr> <td>本地更新 <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> 并提交</td> <td>CI 环境锁定依赖，避免构建失败</td> </tr> <tr> <td>不要在 CI 中禁用 frozen 模式</td> <td>有安全风险，容易引入错误版本</td> </tr> <tr> <td>遇到报错先检查是否提交了锁文件</td> <td>多数构建错误都是因为漏了 Gemfile.lock</td> </tr> </tbody> </table> <hr/> <h2 id="常见坑-vs-解决方案">常见坑 vs 解决方案</h2> <hr/> <table> <thead> <tr> <th>问题场景</th> <th>正确解决方式</th> </tr> </thead> <tbody> <tr> <td>构建时报错 frozen</td> <td>本地运行 <code class="language-plaintext highlighter-rouge">bundle config set frozen false</code> 后重新安装</td> </tr> <tr> <td>手动改了 <code class="language-plaintext highlighter-rouge">Gemfile.lock</code></td> <td>禁止手动修改！请用 <code class="language-plaintext highlighter-rouge">bundle install</code> 自动处理</td> </tr> <tr> <td>插件版本冲突或缺失</td> <td>检查 Gemfile 中插件版本是否兼容</td> </tr> <tr> <td>部署环境无法安装依赖</td> <td>确保 Gemfile.lock 被正确提交并同步</td> </tr> </tbody> </table> <hr/> <h2 id="快速命令汇总复制即用">快速命令汇总（复制即用）</h2> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /your/jekyll/project/path

bundle config <span class="nb">set </span>frozen <span class="nb">false
</span>bundle <span class="nb">install

</span>git add Gemfile Gemfile.lock
git commit <span class="nt">-m</span> <span class="s2">"Update dependencies"</span>
git push
</code></pre></div></div> <hr/> <h2 id="总结建议">总结建议</h2> <hr/> <p>记住这几点：</p> <ul> <li>改 Gemfile ➜ 一定也要改 Gemfile.lock</li> <li>用 <code class="language-plaintext highlighter-rouge">bundle install</code> 自动更新锁文件，不要手动改</li> <li>CI 环境保留 <code class="language-plaintext highlighter-rouge">frozen: true</code> 设置，确保版本一致性</li> <li>先本地检查、再提交构建，避免 CI 报错</li> </ul>]]></content><author><name></name></author><category term="Internet"/><category term="jekyll"/><category term="gemfile"/><summary type="html"><![CDATA[本文整理了在 Jekyll 项目中正确修改 Gemfile 和 Gemfile.lock 的最佳实践，并附上常见问题与解决方案。]]></summary></entry><entry><title type="html">全流程指南：用 Jekyll + al-folio + GitHub + Orbstack 打造本地博客系统（macOS 专用）</title><link href="https://36525.day/blog/2025-06-15/build-blog-with-jekyll-orbstack/" rel="alternate" type="text/html" title="全流程指南：用 Jekyll + al-folio + GitHub + Orbstack 打造本地博客系统（macOS 专用）"/><published>2025-06-15T00:00:00-07:00</published><updated>2025-06-15T00:00:00-07:00</updated><id>https://36525.day/blog/2025-06-15/build-blog-with-jekyll-orbstack</id><content type="html" xml:base="https://36525.day/blog/2025-06-15/build-blog-with-jekyll-orbstack/"><![CDATA[<p><img src="/assets/img/blog/build-blog-with-jekyll-orbstack.webp" style="width:100%;" alt="build-blog-with-jekyll-orbstack"/></p> <p>想搭建一个高颜值、可持续、可本地预览的博客系统？这篇教程将一步一步带你构建完整工作流，结合：</p> <ul> <li><code class="language-plaintext highlighter-rouge">Jekyll + al-folio</code>：内容与学术写作首选静态博客方案</li> <li><code class="language-plaintext highlighter-rouge">GitHub Pages</code>：一键托管自动部署</li> <li><code class="language-plaintext highlighter-rouge">Orbstack</code>：轻量级本地容器平台，适合 macOS</li> <li><code class="language-plaintext highlighter-rouge">VS Code</code>：全功能编辑器，支持 Markdown 与 YAML 插件</li> </ul> <hr/> <h2 id="准备工作">准备工作</h2> <hr/> <p><strong>系统与网络要求：</strong></p> <ul> <li>macOS（Intel 或 Apple 芯片均可）</li> <li>可访问网络</li> <li>熟悉终端操作与基本 Git 流程</li> </ul> <hr/> <h2 id="工具清单">工具清单</h2> <hr/> <table> <thead> <tr> <th>工具</th> <th>用途</th> </tr> </thead> <tbody> <tr> <td>Terminal</td> <td>命令输入</td> </tr> <tr> <td>GitHub Desktop</td> <td>可视化 Git 工具</td> </tr> <tr> <td>Orbstack</td> <td>轻量容器平台（替代 Docker）</td> </tr> <tr> <td>VS Code</td> <td>编写 Markdown / 配置文件</td> </tr> </tbody> </table> <hr/> <h2 id="使用-al-folio-模板创建-github-博客仓库">使用 al-folio 模板创建 GitHub 博客仓库</h2> <hr/> <h3 id="第一步创建仓库">第一步：创建仓库</h3> <hr/> <ol> <li>打开模板项目：<code class="language-plaintext highlighter-rouge">al-folio</code></li> <li>点击 <code class="language-plaintext highlighter-rouge">Use this template</code> → <code class="language-plaintext highlighter-rouge">Create a new repository</code></li> <li>命名为 <code class="language-plaintext highlighter-rouge">yourname.github.io</code>（替换 yourname）</li> </ol> <hr/> <h3 id="第二步配置-github-actions-权限">第二步：配置 GitHub Actions 权限</h3> <hr/> <p>仓库 → <code class="language-plaintext highlighter-rouge">Settings</code> → <code class="language-plaintext highlighter-rouge">Actions</code> → <code class="language-plaintext highlighter-rouge">General</code> → 勾选 <code class="language-plaintext highlighter-rouge">Read and write permissions</code>（用于自动部署）</p> <hr/> <h3 id="第三步修改-_configyml">第三步：修改 <code class="language-plaintext highlighter-rouge">_config.yml</code></h3> <hr/> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://yourname.github.io"</span>
<span class="na">baseurl</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div></div> <hr/> <h3 id="第四步设置-github-pages-来源">第四步：设置 GitHub Pages 来源</h3> <hr/> <p>仓库 → <code class="language-plaintext highlighter-rouge">Settings</code> → <code class="language-plaintext highlighter-rouge">Pages</code>：</p> <ul> <li>Source: <code class="language-plaintext highlighter-rouge">Deploy from a branch</code></li> <li>Branch: <code class="language-plaintext highlighter-rouge">gh-pages</code></li> <li>Folder: <code class="language-plaintext highlighter-rouge">/ (root)</code></li> </ul> <p><strong>等待站点启动</strong>：<code class="language-plaintext highlighter-rouge">https://yourname.github.io</code></p> <hr/> <h2 id="本地开发用-github-desktop--orbstack-快速预览">本地开发：用 GitHub Desktop + Orbstack 快速预览</h2> <hr/> <h3 id="克隆仓库github-desktop">克隆仓库（GitHub Desktop）</h3> <hr/> <p>GitHub Desktop → File → Clone repository… 保存路径示例：<code class="language-plaintext highlighter-rouge">~/xx/GitHub/yourname.github.io</code></p> <hr/> <h3 id="启动-jekyll-博客容器orbstack">启动 Jekyll 博客容器（Orbstack）</h3> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/xx/GitHub/yourname.github.io
docker compose pull      <span class="c"># 拉取镜像</span>
docker compose up        <span class="c"># 启动容器</span>
</code></pre></div></div> <p>本地访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080</code> 支持热更新（Markdown 文件保存后自动刷新页面）</p> <hr/> <h2 id="撰写新文章并部署上线">撰写新文章并部署上线</h2> <hr/> <h3 id="新建-markdown-文章放入-_posts">新建 Markdown 文章（放入 <code class="language-plaintext highlighter-rouge">_posts/</code>）</h3> <hr/> <p>命名格式：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>YYYY-MM-DD-your-title.md
</code></pre></div></div> <p>内容模板：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: 我的第一篇文章
date: 2025-06-20
excerpt: 这是文章摘要
categories: [博客]
tags: [jekyll, al-folio]
---
</code></pre></div></div> <hr/> <h3 id="提交并部署">提交并部署</h3> <hr/> <ol> <li>GitHub Desktop 中 Commit → Push</li> <li>GitHub Actions 自动构建</li> <li>几分钟后网站上线：<code class="language-plaintext highlighter-rouge">https://yourname.github.io</code></li> </ol>]]></content><author><name></name></author><category term="Internet"/><category term="jekyll"/><category term="orbstack"/><category term="github"/><summary type="html"><![CDATA[教你如何用 Jekyll + al-folio 打造结构优雅、可自动部署、支持本地预览的博客系统，适用于 macOS 用户，结合 Orbstack、GitHub 与 VS Code 全流程优化。]]></summary></entry><entry><title type="html">被托管的世界 / The Managed World</title><link href="https://36525.day/blog/2025-05-08/pigs-utopia/" rel="alternate" type="text/html" title="被托管的世界 / The Managed World"/><published>2025-05-08T00:00:00-07:00</published><updated>2025-05-08T00:00:00-07:00</updated><id>https://36525.day/blog/2025-05-08/pigs-utopia</id><content type="html" xml:base="https://36525.day/blog/2025-05-08/pigs-utopia/"><![CDATA[<p><img src="/assets/img/blog/pigs-utopia.webp" style="width:100%;" alt="pigs-utopia"/></p> <h2 id="猪的乌托邦">猪的乌托邦</h2> <p>这个世界，看似辽阔，实则早已被 <strong><mark>无数看不见的围栏</mark></strong>精密圈定。</p> <p>曾有一群猪逃离了屠宰场，建起自己的乌托邦。<br/> 他们宣称再也不被宰杀，再也不听指令。<br/> 他们设立了议会，编制了宪章，升起旗帜，欢庆节日。<br/> 他们以为，自由来临了。</p> <p>可围栏又出现了——只是这次，打上了新的名义：<br/> <strong><mark>“为保护来之不易的文明。”</mark></strong>；<br/> 选票依然存在——但议题早已由<u>品种优化署</u>预设；<br/> 广播仍在响起——但每一个音节都经过<u>泥地安全局</u>的润色。</p> <p>他们用泥巴遮住摄像头，<br/> 却不知道泥巴也被列入监管物资；<br/> 他们学会了在围栏下跳舞，<br/> 却不敢再提“墙外”的传说。</p> <p><strong><mark>这不是猪的问题，而是结构的问题。</mark></strong></p> <p>我们所生活的世界，又何尝不是一场<u>幸福化托管</u>的乌托邦？</p> <p><u>国家以稳定为名</u>，构建恐惧逻辑：安全换自由；<br/> <u>资本以效率为名</u>，收割劳动尊严：便利换隐私；<br/> <u>科技以进步为名</u>，加固控制系统：算法换选择权；<br/> <u>教育以成长为名</u>，训练服从模式：标准换灵魂。</p> <p>于是我们进入了一个“允许一切，但只在指定区域”运行的时代：</p> <p>你可以发声——但不超出频道；<br/> 你可以选择——但在推荐菜单里；<br/> 你可以反叛——但请在舞台剧本中配合演出。</p> <p>这不是奴役，而是<u>参与式幸福</u>；<br/> 不是剥夺，而是<u>个性化照顾</u>；<br/> 不是封锁，而是<u>智能优化路径</u>。</p> <p>最精妙的结构并不压迫你——<br/> 它让你感恩、庆祝、甚至主动守护那道看不见的围栏。</p> <p>你以为自由是一种奔跑的姿态，<br/> 但你早已在数据链中滑行，<br/> 每一次选择都带有标签，<br/> 每一次沉默都被标注为“服从”。</p> <p>就像那群围墙内唱歌的猪，<br/> 他们跳舞时高喊：<strong><mark>“我们终于不是牲畜！”</mark></strong></p> <p>却从未有人再提问：</p> <p><strong><mark>谁设立了围墙？墙外是谁？为何我们从未真正离开？</mark></strong></p> <p>乌托邦不是谎言，<br/> 它只是以完美的名义，<br/> 悄悄剥夺了提问与出走的可能。</p> <p>/</p> <h2 id="pigs-utopia">Pig’s Utopia</h2> <p>This world, though seemingly vast, is already meticulously fenced in by <strong><mark>countless invisible boundaries</mark></strong>.</p> <p>Once, a group of pigs escaped the slaughterhouse and built their own utopia.<br/> They declared they would never again be butchered, never again follow orders.<br/> They formed a parliament, drafted a charter, raised a flag, and celebrated new holidays.<br/> They believed freedom had arrived.</p> <p>But soon, fences returned—only now, they bore new names:<br/> <strong><mark>"To protect the hard-earned civilization."</mark></strong><br/> Votes still existed—but all topics were preselected by the <u>Breed Optimization Bureau</u>.<br/> Broadcasts still played—but every note had been cleared by the <u>Mudfield Safety Agency</u>.</p> <p>They smeared mud over the surveillance cameras,<br/> not knowing that mud itself was now a regulated material.<br/> They learned to dance beneath the fence,<br/> but no longer dared to mention the legends of “the outside”.</p> <p><strong><mark>This is not the pigs' fault, it is the structure's fault.</mark></strong></p> <p>The world we live in—is it not also a carefully curated utopia of <u>benevolent custody</u>?</p> <p><u>The state in the name of stability</u>, constructs a logic of fear: Security traded for freedom.<br/> <u>Capital in the name of efficiency</u>, harvests the dignity of labor: Convenience traded for privacy.<br/> <u>Technology in the name of progress</u>, reinforces control systems: Algorithms traded for agency.<br/> <u>Education in the name of growth</u>, trains obedience as a virtue: Standardization traded for soul.</p> <p>And so we enter an era that “permits everything—within assigned zones”:</p> <p>You may speak—but not beyond the approved channel.<br/> You may choose—but only from the recommended list.<br/> You may rebel—but kindly stay within the script.</p> <p>This is not enslavement—it is <u>participatory happiness</u>.<br/> Not deprivation—but <u>personalized care</u>.<br/> Not censorship—but <u>intelligent path optimization</u>.</p> <p>The most exquisite system does not crush you—<br/> it makes you grateful for the cage, celebrate it, even defend it with your own voice.</p> <p>You thought freedom was a way of running,<br/> but you were already sliding along a data rail.<br/> Every choice, already labeled.<br/> Every silence, quietly marked as “compliance”.</p> <p>Just like those pigs singing inside the wall,<br/> dancing proudly as they chant: <strong><mark>"We are no longer livestock!"</mark></strong></p> <p>And yet, no one dares to ask:</p> <p><strong><mark>Who built the wall? What lies beyond it? And why have we never truly left?</mark></strong></p> <p>Utopia is not a lie, it is simply a perfect excuse,<br/> to erase the very possibility of questioning or departure.</p>]]></content><author><name></name></author><category term="Notes"/><category term="Poems"/><category term="utopia"/><summary type="html"><![CDATA[逃出屠宰场的猪建起乌托邦，却在幸福托管中陷入新围栏。这是结构性的问题。Pigs escaped slaughterhouse to build a utopia—only to find new fences in the name of protection. This is about structure.]]></summary></entry></feed>